{-# OPTIONS --without-K #-}

module plfa.demo.DoubleSubstitutionMore where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Unit using (‚ä§; tt)
open import Data.Bool using (T; not)
open import Data.Maybe using (Maybe; nothing; just)
open import Data.Nat using (‚Ñï; zero; suc; _<_; _<?_; z‚â§n; s‚â§s)
open import Data.List using (List; []; _‚à∑_; _++_)
open import Data.List.Relation.Unary.All using (All; []; _‚à∑_)
open import Data.List.Relation.Unary.Any using (Any; here; there)
open import Data.List.Relation.Unary.Any.Properties using (++‚Åª)
open import Data.List.Membership.Propositional using (_‚àà_)
open import Data.Product using (Œ£; _√ó_; _,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (_‚àò_; flip)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Decidable using (True; toWitness)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; sym; trans; cong; cong‚ÇÇ; subst)

open import plfa.part1.Equality using (cong‚ÇÉ)
open import plfa.part2.More

-- useful congruences

cong-extend : {Œì Œî : Context}
    ‚Üí {œÉ‚ÇÅ œÉ‚ÇÇ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A}
    ‚Üí (p : {A : Type} ‚Üí (index : Œì ‚àã A) ‚Üí œÉ‚ÇÅ index ‚â° œÉ‚ÇÇ index)
    ‚Üí ({A B : Type} ‚Üí (index : Œì ‚Äö B ‚àã A) ‚Üí extend œÉ‚ÇÅ index ‚â° extend œÉ‚ÇÇ index)
cong-extend p here = refl
cong-extend p (there index) = cong shift (p index)

cong-substitute : {Œì Œî : Context}
    ‚Üí {œÉ‚ÇÅ œÉ‚ÇÇ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A}
    ‚Üí (p : {A : Type} ‚Üí (index : Œì ‚àã A) ‚Üí œÉ‚ÇÅ index ‚â° œÉ‚ÇÇ index)
    ‚Üí {A : Type}
    ‚Üí (term : Œì ‚ä¢ A)
    ‚Üí substitute œÉ‚ÇÅ term ‚â° substitute œÉ‚ÇÇ term
cong-substitute p (lookup index) = p index
cong-substitute p (ŒªÃá term) = cong ŒªÃá_ (cong-substitute (cong-extend p) term)
cong-substitute p (term‚ÇÅ ¬∑ term‚ÇÇ) = cong‚ÇÇ _¬∑_ (cong-substitute p term‚ÇÅ) (cong-substitute p term‚ÇÇ)
cong-substitute p zÃáero = refl
cong-substitute p (sÃáuc term) = cong sÃáuc_ (cong-substitute p term)
cong-substitute p (case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case‚ÑïÃá (cong-substitute p term‚ÇÅ) (cong-substitute p term‚ÇÇ) (cong-substitute (cong-extend p) term‚ÇÉ)
cong-substitute p (ŒºÃá term) = cong ŒºÃá_ (cong-substitute (cong-extend p) term)
cong-substitute p (lÃáet term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ lÃáet (cong-substitute p term‚ÇÅ) (cong-substitute (cong-extend p) term‚ÇÇ)
cong-substitute p (prim n) = refl
cong-substitute p zÃÇero = refl
cong-substitute p (sÃÇuc term) = cong sÃÇuc_ (cong-substitute p term)
cong-substitute p (term‚ÇÅ +ÃÇ term‚ÇÇ) = cong‚ÇÇ _+ÃÇ_ (cong-substitute p term‚ÇÅ) (cong-substitute p term‚ÇÇ)
cong-substitute p (term‚ÇÅ *ÃÇ term‚ÇÇ) = cong‚ÇÇ _*ÃÇ_ (cong-substitute p term‚ÇÅ) (cong-substitute p term‚ÇÇ)
cong-substitute p (caseùüòÃá term) = cong caseùüòÃá (cong-substitute p term)
cong-substitute p tÃát = refl
cong-substitute p (caseùüôÃá term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ caseùüôÃá (cong-substitute p term‚ÇÅ) (cong-substitute p term‚ÇÇ)
cong-substitute p (iÃánj‚ÇÅ term) = cong iÃánj‚ÇÅ (cong-substitute p term)
cong-substitute p (iÃánj‚ÇÇ term) = cong iÃánj‚ÇÇ (cong-substitute p term)
cong-substitute p (case+Ãá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case+Ãá (cong-substitute p term‚ÇÅ) (cong-substitute (cong-extend p) term‚ÇÇ) (cong-substitute (cong-extend p) term‚ÇÉ)
cong-substitute p (term‚ÇÅ ,Ãá term‚ÇÇ) = cong‚ÇÇ _,Ãá_ (cong-substitute p term‚ÇÅ) (cong-substitute p term‚ÇÇ)
cong-substitute p (pÃároj‚ÇÅ term) = cong pÃároj‚ÇÅ (cong-substitute p term)
cong-substitute p (pÃároj‚ÇÇ term) = cong pÃároj‚ÇÇ (cong-substitute p term)
cong-substitute p (case√óÃá term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ case√óÃá (cong-substitute p term‚ÇÅ) (cong-substitute (cong-extend (cong-extend p)) term‚ÇÇ)
cong-substitute p [Ãá] = refl
cong-substitute p (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) = cong‚ÇÇ _‚à∑Ãá_ (cong-substitute p term‚ÇÅ) (cong-substitute p term‚ÇÇ)
cong-substitute p (caseLÃáist term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ caseLÃáist (cong-substitute p term‚ÇÅ) (cong-substitute p term‚ÇÇ) (cong-substitute (cong-extend (cong-extend p)) term‚ÇÉ)

-- repeated extend-reindex (extends-reindex) and repeated extend (extends)

extends-reindex : {Œì Œî : Context}
    ‚Üí ({A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A)
    ‚Üí ({A : Type} ‚Üí {Œï : Context} ‚Üí Œì ‚Äö‚Äö Œï ‚àã A ‚Üí Œî ‚Äö‚Äö Œï ‚àã A)
extends-reindex œÅ {Œï = []} = œÅ
extends-reindex œÅ {Œï = Œï ‚Äö B} = extend-reindex (extends-reindex œÅ)

extends : {Œì Œî : Context}
    ‚Üí ({A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A)
    ‚Üí ({A : Type} ‚Üí {Œï : Context} ‚Üí Œì ‚Äö‚Äö Œï ‚àã A ‚Üí Œî ‚Äö‚Äö Œï ‚ä¢ A)
extends œÉ {Œï = []} = œÉ
extends œÉ {Œï = Œï ‚Äö B} = extend (extends œÉ)

-- lemma 1: substitute-shift

extend-compose : {Œì Œî Œï : Context}
    ‚Üí {œÅ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A}
    ‚Üí {œÉ : {A : Type} ‚Üí Œî ‚àã A ‚Üí Œï ‚ä¢ A}
    ‚Üí {A B : Type}
    ‚Üí (index : Œì ‚Äö B ‚àã A)
    ‚Üí ((extend œÉ) ‚àò (extend-reindex œÅ)) index ‚â° extend (œÉ ‚àò œÅ) index
extend-compose here = refl
extend-compose (there index) = refl

extends-compose : {Œì Œî Œï : Context}
    ‚Üí {œÅ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A}
    ‚Üí {œÉ : {A : Type} ‚Üí Œî ‚àã A ‚Üí Œï ‚ä¢ A}
    ‚Üí {A : Type} ‚Üí {Œñ : Context}
    ‚Üí (index : Œì ‚Äö‚Äö Œñ ‚àã A)
    ‚Üí ((extends œÉ) ‚àò (extends-reindex œÅ)) index ‚â° extends (œÉ ‚àò œÅ) index
extends-compose {Œñ = []} index = refl
extends-compose {Œñ = Œñ ‚Äö B} here = refl
extends-compose {œÅ = œÅ} {œÉ = œÉ} {Œñ = Œñ ‚Äö B} (there index) = trans (extend-compose {œÅ = extends-reindex œÅ} {œÉ = extends œÉ} (there index)) (cong shift (extends-compose {œÅ = œÅ} {œÉ = œÉ} index))

substitute-compose : {Œì Œî Œï : Context}
    ‚Üí {œÅ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A}
    ‚Üí {œÉ : {A : Type} ‚Üí Œî ‚àã A ‚Üí Œï ‚ä¢ A}
    ‚Üí {A : Type}
    ‚Üí (term : Œì ‚ä¢ A)
    ‚Üí substitute œÉ (reindex-to-rebase œÅ term) ‚â° substitute (œÉ ‚àò œÅ) term
substitute-compose (lookup index) = refl
substitute-compose (ŒªÃá term) = cong ŒªÃá_ (trans (substitute-compose term) (cong-substitute extend-compose term))
substitute-compose (term‚ÇÅ ¬∑ term‚ÇÇ) = cong‚ÇÇ _¬∑_ (substitute-compose term‚ÇÅ) (substitute-compose term‚ÇÇ)
substitute-compose zÃáero = refl
substitute-compose (sÃáuc term) = cong sÃáuc_ (substitute-compose term)
substitute-compose (case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case‚ÑïÃá (substitute-compose term‚ÇÅ) (substitute-compose term‚ÇÇ) (trans (substitute-compose term‚ÇÉ) (cong-substitute extend-compose term‚ÇÉ))
substitute-compose (ŒºÃá term) = cong ŒºÃá_ (trans (substitute-compose term) (cong-substitute extend-compose term))
substitute-compose (lÃáet term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ lÃáet (substitute-compose term‚ÇÅ) (trans (substitute-compose term‚ÇÇ) (cong-substitute extend-compose term‚ÇÇ))
substitute-compose (prim n) = refl
substitute-compose zÃÇero = refl
substitute-compose (sÃÇuc term) = cong sÃÇuc_ (substitute-compose term)
substitute-compose (term‚ÇÅ +ÃÇ term‚ÇÇ) = cong‚ÇÇ _+ÃÇ_ (substitute-compose term‚ÇÅ) (substitute-compose term‚ÇÇ)
substitute-compose (term‚ÇÅ *ÃÇ term‚ÇÇ) = cong‚ÇÇ _*ÃÇ_ (substitute-compose term‚ÇÅ) (substitute-compose term‚ÇÇ)
substitute-compose (caseùüòÃá term) = cong caseùüòÃá (substitute-compose term)
substitute-compose tÃát = refl
substitute-compose (caseùüôÃá term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ caseùüôÃá (substitute-compose term‚ÇÅ) (substitute-compose term‚ÇÇ)
substitute-compose (iÃánj‚ÇÅ term) = cong iÃánj‚ÇÅ (substitute-compose term)
substitute-compose (iÃánj‚ÇÇ term) = cong iÃánj‚ÇÇ (substitute-compose term)
substitute-compose (case+Ãá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case+Ãá (substitute-compose term‚ÇÅ) (trans (substitute-compose term‚ÇÇ) (cong-substitute extend-compose term‚ÇÇ)) (trans (substitute-compose term‚ÇÉ) (cong-substitute extend-compose term‚ÇÉ))
substitute-compose (term‚ÇÅ ,Ãá term‚ÇÇ) = cong‚ÇÇ _,Ãá_ (substitute-compose term‚ÇÅ) (substitute-compose term‚ÇÇ)
substitute-compose (pÃároj‚ÇÅ term) = cong pÃároj‚ÇÅ (substitute-compose term)
substitute-compose (pÃároj‚ÇÇ term) = cong pÃároj‚ÇÇ (substitute-compose term)
substitute-compose (case√óÃá {A = A} {B = B} term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ case√óÃá (substitute-compose term‚ÇÅ) (trans (substitute-compose term‚ÇÇ) (cong-substitute (extends-compose {Œñ = [] ‚Äö A ‚Äö B}) term‚ÇÇ))
substitute-compose [Ãá] = refl
substitute-compose (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) = cong‚ÇÇ _‚à∑Ãá_ (substitute-compose term‚ÇÅ) (substitute-compose term‚ÇÇ)
substitute-compose (caseLÃáist {A = A} term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ caseLÃáist (substitute-compose term‚ÇÅ) (substitute-compose term‚ÇÇ) (trans (substitute-compose term‚ÇÉ) (cong-substitute (extends-compose {Œñ = [] ‚Äö A ‚Äö LÃáist A}) term‚ÇÉ))

extend-lookup : {Œì : Context} ‚Üí {A B : Type}
    ‚Üí (index : Œì ‚Äö B ‚àã A)
    ‚Üí extend lookup index ‚â° lookup index
extend-lookup here = refl
extend-lookup (there index) = refl

extends-lookup : {Œì Œî : Context} ‚Üí {A : Type}
    ‚Üí (index : Œì ‚Äö‚Äö Œî ‚àã A)
    ‚Üí extends (lookup {Œì = Œì}) index ‚â° lookup index
extends-lookup {Œî = []} index = refl
extends-lookup {Œî = Œî ‚Äö B} here = refl
extends-lookup {Œî = Œî ‚Äö B} (there index) = cong shift (extends-lookup {Œî = Œî} index)

substitute-lookup : {Œì : Context} ‚Üí {A : Type}
    ‚Üí (term : Œì ‚ä¢ A)
    ‚Üí substitute lookup term ‚â° term
substitute-lookup (lookup index) = refl
substitute-lookup (ŒªÃá term) = cong ŒªÃá_ (trans (cong-substitute extend-lookup term) (substitute-lookup term))
substitute-lookup (term‚ÇÅ ¬∑ term‚ÇÇ) = cong‚ÇÇ _¬∑_ (substitute-lookup term‚ÇÅ) (substitute-lookup term‚ÇÇ)
substitute-lookup zÃáero = refl
substitute-lookup (sÃáuc term) = cong sÃáuc_ (substitute-lookup term)
substitute-lookup (case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case‚ÑïÃá (substitute-lookup term‚ÇÅ) (substitute-lookup term‚ÇÇ) (trans (cong-substitute extend-lookup term‚ÇÉ) (substitute-lookup term‚ÇÉ))
substitute-lookup (ŒºÃá term) = cong ŒºÃá_ (trans (cong-substitute extend-lookup term) (substitute-lookup term))
substitute-lookup (lÃáet term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ lÃáet (substitute-lookup term‚ÇÅ) (trans (cong-substitute extend-lookup term‚ÇÇ) (substitute-lookup term‚ÇÇ))
substitute-lookup (prim n) = refl
substitute-lookup zÃÇero = refl
substitute-lookup (sÃÇuc term) = cong sÃÇuc_ (substitute-lookup term)
substitute-lookup (term‚ÇÅ +ÃÇ term‚ÇÇ) = cong‚ÇÇ _+ÃÇ_ (substitute-lookup term‚ÇÅ) (substitute-lookup term‚ÇÇ)
substitute-lookup (term‚ÇÅ *ÃÇ term‚ÇÇ) = cong‚ÇÇ _*ÃÇ_ (substitute-lookup term‚ÇÅ) (substitute-lookup term‚ÇÇ)
substitute-lookup (caseùüòÃá term) = cong caseùüòÃá (substitute-lookup term)
substitute-lookup tÃát = refl
substitute-lookup (caseùüôÃá term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ caseùüôÃá (substitute-lookup term‚ÇÅ) (substitute-lookup term‚ÇÇ)
substitute-lookup (iÃánj‚ÇÅ term) = cong iÃánj‚ÇÅ (substitute-lookup term)
substitute-lookup (iÃánj‚ÇÇ term) = cong iÃánj‚ÇÇ (substitute-lookup term)
substitute-lookup (case+Ãá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case+Ãá (substitute-lookup term‚ÇÅ) (trans (cong-substitute extend-lookup term‚ÇÇ) (substitute-lookup term‚ÇÇ)) (trans (cong-substitute extend-lookup term‚ÇÉ) (substitute-lookup term‚ÇÉ))
substitute-lookup (term‚ÇÅ ,Ãá term‚ÇÇ) = cong‚ÇÇ _,Ãá_ (substitute-lookup term‚ÇÅ) (substitute-lookup term‚ÇÇ)
substitute-lookup (pÃároj‚ÇÅ term) = cong pÃároj‚ÇÅ (substitute-lookup term)
substitute-lookup (pÃároj‚ÇÇ term) = cong pÃároj‚ÇÇ (substitute-lookup term)
substitute-lookup (case√óÃá {A = A} {B = B} term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ case√óÃá (substitute-lookup term‚ÇÅ) (trans (cong-substitute (extends-lookup {Œî = [] ‚Äö A ‚Äö B}) term‚ÇÇ) (substitute-lookup term‚ÇÇ))
substitute-lookup [Ãá] = refl
substitute-lookup (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) = cong‚ÇÇ _‚à∑Ãá_ (substitute-lookup term‚ÇÅ) (substitute-lookup term‚ÇÇ)
substitute-lookup (caseLÃáist {A = A} term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ caseLÃáist (substitute-lookup term‚ÇÅ) (substitute-lookup term‚ÇÇ) (trans (cong-substitute (extends-lookup {Œî = [] ‚Äö A ‚Äö LÃáist A}) term‚ÇÉ) (substitute-lookup term‚ÇÉ))

substitute-shift : {Œì : Context} ‚Üí {A B : Type}
    ‚Üí (term‚ÇÅ : Œì ‚ä¢ A)
    ‚Üí (term‚ÇÇ : Œì ‚ä¢ B)
    ‚Üí (shift term‚ÇÅ) [ term‚ÇÇ ] ‚â° term‚ÇÅ
substitute-shift term‚ÇÅ term‚ÇÇ = trans (substitute-compose term‚ÇÅ) (substitute-lookup term‚ÇÅ)

-- lemma 2: substitute-substitute-compose

insert-twice-index : {Œì Œî Œï : Context}
    ‚Üí {A B C : Type}
    ‚Üí (index : Œì ‚Äö‚Äö Œî ‚Äö‚Äö Œï ‚àã A)
    ‚Üí extends-reindex (there {B = C}) {Œï = Œï} (extends-reindex (extends-reindex (there {B = B}) {Œï = Œî}) {Œï = Œï} index) ‚â° extends-reindex (extend-reindex (extends-reindex there)) (extends-reindex there index) -- (Œì ‚Äö B ‚Äö‚Äö Œî) ‚Äö C ‚Äö‚Äö Œï ‚àã A
insert-twice-index {Œï = []} index = refl
insert-twice-index {Œï = Œï ‚Äö D} here = refl
insert-twice-index {Œï = Œï ‚Äö D} (there index) = cong there (insert-twice-index index)

insert-twice : {Œì Œî Œï : Context}
    ‚Üí {A B C : Type}
    ‚Üí (term : Œì ‚Äö‚Äö Œî ‚Äö‚Äö Œï ‚ä¢ A)
    ‚Üí reindex-to-rebase (extends-reindex (there {B = C}) {Œï = Œï}) (reindex-to-rebase (extends-reindex (extends-reindex (there {B = B}) {Œï = Œî}) {Œï = Œï}) term) ‚â° reindex-to-rebase (extends-reindex (extend-reindex (extends-reindex there))) (reindex-to-rebase (extends-reindex there) term) -- (Œì ‚Äö B ‚Äö‚Äö Œî) ‚Äö C ‚Äö‚Äö Œï ‚ä¢ A
insert-twice (lookup index) = cong lookup (insert-twice-index index)
insert-twice {Œï = Œï} {A = A‚ÇÅ ‚ÜíÃá A‚ÇÇ} (ŒªÃá term) = cong ŒªÃá_ (insert-twice {Œï = Œï ‚Äö A‚ÇÅ} term)
insert-twice (term‚ÇÅ ¬∑ term‚ÇÇ) = cong‚ÇÇ _¬∑_ (insert-twice term‚ÇÅ) (insert-twice term‚ÇÇ)
insert-twice zÃáero = refl
insert-twice (sÃáuc term) = cong sÃáuc_ (insert-twice term)
insert-twice {Œï = Œï} (case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case‚ÑïÃá (insert-twice term‚ÇÅ) (insert-twice term‚ÇÇ) (insert-twice {Œï = Œï ‚Äö ‚ÑïÃá} term‚ÇÉ)
insert-twice {Œï = Œï} {A = A} (ŒºÃá term) = cong ŒºÃá_ (insert-twice {Œï = Œï ‚Äö A} term)
insert-twice {Œï = Œï} (lÃáet {A = A} term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ lÃáet (insert-twice term‚ÇÅ) (insert-twice {Œï = Œï ‚Äö A} term‚ÇÇ)
insert-twice (prim n) = refl
insert-twice zÃÇero = refl
insert-twice (sÃÇuc term) = cong sÃÇuc_ (insert-twice term)
insert-twice (term‚ÇÅ +ÃÇ term‚ÇÇ) = cong‚ÇÇ _+ÃÇ_ (insert-twice term‚ÇÅ) (insert-twice term‚ÇÇ)
insert-twice (term‚ÇÅ *ÃÇ term‚ÇÇ) = cong‚ÇÇ _*ÃÇ_ (insert-twice term‚ÇÅ) (insert-twice term‚ÇÇ)
insert-twice (caseùüòÃá term) = cong caseùüòÃá (insert-twice term)
insert-twice tÃát = refl
insert-twice (caseùüôÃá term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ caseùüôÃá (insert-twice term‚ÇÅ) (insert-twice term‚ÇÇ)
insert-twice (iÃánj‚ÇÅ term) = cong iÃánj‚ÇÅ (insert-twice term)
insert-twice (iÃánj‚ÇÇ term) = cong iÃánj‚ÇÇ (insert-twice term)
insert-twice {Œï = Œï} (case+Ãá {A = A} {B = B} term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case+Ãá (insert-twice term‚ÇÅ) (insert-twice {Œï = Œï ‚Äö A} term‚ÇÇ) (insert-twice {Œï = Œï ‚Äö B} term‚ÇÉ)
insert-twice (term‚ÇÅ ,Ãá term‚ÇÇ) = cong‚ÇÇ _,Ãá_ (insert-twice term‚ÇÅ) (insert-twice term‚ÇÇ)
insert-twice (pÃároj‚ÇÅ term) = cong pÃároj‚ÇÅ (insert-twice term)
insert-twice (pÃároj‚ÇÇ term) = cong pÃároj‚ÇÇ (insert-twice term)
insert-twice {Œï = Œï} (case√óÃá {A = A} {B = B} term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ case√óÃá (insert-twice term‚ÇÅ) (insert-twice {Œï = Œï ‚Äö A ‚Äö B} term‚ÇÇ)
insert-twice [Ãá] = refl
insert-twice (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) = cong‚ÇÇ _‚à∑Ãá_ (insert-twice term‚ÇÅ) (insert-twice term‚ÇÇ)
insert-twice {Œï = Œï} (caseLÃáist {A = A} term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ caseLÃáist (insert-twice term‚ÇÅ) (insert-twice term‚ÇÇ) (insert-twice {Œï = Œï ‚Äö A ‚Äö LÃáist A} term‚ÇÉ)

insert-substitute-index : {Œì Œî Œï : Context}
    ‚Üí {A B : Type}
    ‚Üí {œÉ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A}
    ‚Üí (index : Œì ‚Äö‚Äö Œï ‚àã A)
    ‚Üí extends (extend œÉ {B = B}) {Œï = Œï} (extends-reindex there index) ‚â° reindex-to-rebase (extends-reindex there) (extends œÉ index) -- Œî ‚Äö B ‚Äö‚Äö Œï ‚ä¢ A
insert-substitute-index {Œï = []} index = refl
insert-substitute-index {Œï = Œï ‚Äö C} here = refl
insert-substitute-index {Œï = Œï ‚Äö C} {œÉ = œÉ} (there index) = trans (cong shift (insert-substitute-index index)) (insert-twice {Œï = []} (extends œÉ index))

insert-substitute : {Œì Œî Œï : Context}
    ‚Üí {A B : Type}
    ‚Üí {œÉ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A}
    ‚Üí (term : Œì ‚Äö‚Äö Œï ‚ä¢ A)
    ‚Üí substitute (extends (extend œÉ {B = B}) {Œï = Œï}) (reindex-to-rebase (extends-reindex there) term) ‚â° reindex-to-rebase (extends-reindex there) (substitute (extends œÉ) term) -- Œî ‚Äö B ‚Äö‚Äö Œï ‚ä¢ A
insert-substitute (lookup index) = insert-substitute-index index
insert-substitute {Œï = Œï} {A = A‚ÇÅ ‚ÜíÃá A‚ÇÇ} (ŒªÃá term) = cong ŒªÃá_ (insert-substitute {Œï = Œï ‚Äö A‚ÇÅ} term)
insert-substitute (term‚ÇÅ ¬∑ term‚ÇÇ) = cong‚ÇÇ _¬∑_ (insert-substitute term‚ÇÅ) (insert-substitute term‚ÇÇ)
insert-substitute zÃáero = refl
insert-substitute (sÃáuc term) = cong sÃáuc_ (insert-substitute term)
insert-substitute {Œï = Œï} (case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case‚ÑïÃá (insert-substitute term‚ÇÅ) (insert-substitute term‚ÇÇ) (insert-substitute {Œï = Œï ‚Äö ‚ÑïÃá} term‚ÇÉ)
insert-substitute {Œï = Œï} {A = A} (ŒºÃá term) = cong ŒºÃá_ (insert-substitute {Œï = Œï ‚Äö A} term)
insert-substitute {Œï = Œï} (lÃáet {A = A} term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ lÃáet (insert-substitute term‚ÇÅ) (insert-substitute {Œï = Œï ‚Äö A} term‚ÇÇ)
insert-substitute (prim n) = refl
insert-substitute zÃÇero = refl
insert-substitute (sÃÇuc term) = cong sÃÇuc_ (insert-substitute term)
insert-substitute (term‚ÇÅ +ÃÇ term‚ÇÇ) = cong‚ÇÇ _+ÃÇ_ (insert-substitute term‚ÇÅ) (insert-substitute term‚ÇÇ)
insert-substitute (term‚ÇÅ *ÃÇ term‚ÇÇ) = cong‚ÇÇ _*ÃÇ_ (insert-substitute term‚ÇÅ) (insert-substitute term‚ÇÇ)
insert-substitute (caseùüòÃá term) = cong caseùüòÃá (insert-substitute term)
insert-substitute tÃát = refl
insert-substitute (caseùüôÃá term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ caseùüôÃá (insert-substitute term‚ÇÅ) (insert-substitute term‚ÇÇ)
insert-substitute (iÃánj‚ÇÅ term) = cong iÃánj‚ÇÅ (insert-substitute term)
insert-substitute (iÃánj‚ÇÇ term) = cong iÃánj‚ÇÇ (insert-substitute term)
insert-substitute {Œï = Œï} (case+Ãá {A = A} {B = B} term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case+Ãá (insert-substitute term‚ÇÅ) (insert-substitute {Œï = Œï ‚Äö A} term‚ÇÇ) (insert-substitute {Œï = Œï ‚Äö B} term‚ÇÉ)
insert-substitute (term‚ÇÅ ,Ãá term‚ÇÇ) = cong‚ÇÇ _,Ãá_ (insert-substitute term‚ÇÅ) (insert-substitute term‚ÇÇ)
insert-substitute (pÃároj‚ÇÅ term) = cong pÃároj‚ÇÅ (insert-substitute term)
insert-substitute (pÃároj‚ÇÇ term) = cong pÃároj‚ÇÇ (insert-substitute term)
insert-substitute {Œï = Œï} (case√óÃá {A = A} {B = B} term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ case√óÃá (insert-substitute term‚ÇÅ) (insert-substitute {Œï = Œï ‚Äö A ‚Äö B} term‚ÇÇ)
insert-substitute [Ãá] = refl
insert-substitute (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) = cong‚ÇÇ _‚à∑Ãá_ (insert-substitute term‚ÇÅ) (insert-substitute term‚ÇÇ)
insert-substitute {Œï = Œï} (caseLÃáist {A = A} term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ caseLÃáist (insert-substitute term‚ÇÅ) (insert-substitute term‚ÇÇ) (insert-substitute {Œï = Œï ‚Äö A ‚Äö LÃáist A} term‚ÇÉ)

shift-substitute : {Œì Œî : Context}
    ‚Üí {A B : Type}
    ‚Üí {œÉ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A}
    ‚Üí (term : Œì ‚ä¢ A)
    ‚Üí substitute (extend œÉ {B = B}) (shift term) ‚â° shift (substitute œÉ term) -- Œî ‚Äö B ‚ä¢ A
shift-substitute = insert-substitute {Œï = []}

extend-substitute-compose : {Œì Œî Œï : Context}
    ‚Üí {œÉ‚ÇÅ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A}
    ‚Üí {œÉ‚ÇÇ : {A : Type} ‚Üí Œî ‚àã A ‚Üí Œï ‚ä¢ A}
    ‚Üí {A B : Type}
    ‚Üí (index : Œì ‚Äö B ‚àã A)
    ‚Üí ((substitute (extend œÉ‚ÇÇ)) ‚àò extend œÉ‚ÇÅ) index ‚â° extend ((substitute œÉ‚ÇÇ) ‚àò œÉ‚ÇÅ) index
extend-substitute-compose here = refl
extend-substitute-compose {œÉ‚ÇÅ = œÉ‚ÇÅ} (there index) = shift-substitute (œÉ‚ÇÅ index)

extends-substitute-compose : {Œì Œî Œï : Context}
    ‚Üí {œÉ‚ÇÅ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A}
    ‚Üí {œÉ‚ÇÇ : {A : Type} ‚Üí Œî ‚àã A ‚Üí Œï ‚ä¢ A}
    ‚Üí {A : Type} ‚Üí {Œñ : Context}
    ‚Üí (index : Œì ‚Äö‚Äö Œñ ‚àã A)
    ‚Üí ((substitute (extends œÉ‚ÇÇ)) ‚àò extends œÉ‚ÇÅ) index ‚â° extends ((substitute œÉ‚ÇÇ) ‚àò œÉ‚ÇÅ) index
extends-substitute-compose {Œñ = []} index = refl
extends-substitute-compose {Œñ = Œñ ‚Äö B} here = refl
extends-substitute-compose {œÉ‚ÇÅ = œÉ‚ÇÅ} {Œñ = Œñ ‚Äö B} (there index) = trans (extend-substitute-compose {œÉ‚ÇÅ = extends œÉ‚ÇÅ} (there index)) (cong shift (extends-substitute-compose {œÉ‚ÇÅ = œÉ‚ÇÅ} index))

substitute-substitute-compose : {Œì Œî Œï : Context}
    ‚Üí {œÉ‚ÇÅ : {A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A}
    ‚Üí {œÉ‚ÇÇ : {A : Type} ‚Üí Œî ‚àã A ‚Üí Œï ‚ä¢ A}
    ‚Üí {A : Type}
    ‚Üí (term : Œì ‚ä¢ A)
    ‚Üí substitute œÉ‚ÇÇ (substitute œÉ‚ÇÅ term) ‚â° substitute ((substitute œÉ‚ÇÇ) ‚àò œÉ‚ÇÅ) term
substitute-substitute-compose (lookup index) = refl
substitute-substitute-compose (ŒªÃá term) = cong ŒªÃá_ (trans (substitute-substitute-compose term) (cong-substitute extend-substitute-compose term))
substitute-substitute-compose (term‚ÇÅ ¬∑ term‚ÇÇ) = cong‚ÇÇ _¬∑_ (substitute-substitute-compose term‚ÇÅ) (substitute-substitute-compose term‚ÇÇ)
substitute-substitute-compose zÃáero = refl
substitute-substitute-compose (sÃáuc term) = cong sÃáuc_ (substitute-substitute-compose term)
substitute-substitute-compose (case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case‚ÑïÃá (substitute-substitute-compose term‚ÇÅ) (substitute-substitute-compose term‚ÇÇ) (trans (substitute-substitute-compose term‚ÇÉ) (cong-substitute extend-substitute-compose term‚ÇÉ))
substitute-substitute-compose (ŒºÃá term) = cong ŒºÃá_ (trans (substitute-substitute-compose term) (cong-substitute extend-substitute-compose term))
substitute-substitute-compose (lÃáet term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ lÃáet (substitute-substitute-compose term‚ÇÅ) (trans (substitute-substitute-compose term‚ÇÇ) (cong-substitute extend-substitute-compose term‚ÇÇ))
substitute-substitute-compose (prim n) = refl
substitute-substitute-compose zÃÇero = refl
substitute-substitute-compose (sÃÇuc term) = cong sÃÇuc_ (substitute-substitute-compose term)
substitute-substitute-compose (term‚ÇÅ +ÃÇ term‚ÇÇ) = cong‚ÇÇ _+ÃÇ_ (substitute-substitute-compose term‚ÇÅ) (substitute-substitute-compose term‚ÇÇ)
substitute-substitute-compose (term‚ÇÅ *ÃÇ term‚ÇÇ) = cong‚ÇÇ _*ÃÇ_ (substitute-substitute-compose term‚ÇÅ) (substitute-substitute-compose term‚ÇÇ)
substitute-substitute-compose (caseùüòÃá term) = cong caseùüòÃá (substitute-substitute-compose term)
substitute-substitute-compose tÃát = refl
substitute-substitute-compose (caseùüôÃá term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ caseùüôÃá (substitute-substitute-compose term‚ÇÅ) (substitute-substitute-compose term‚ÇÇ)
substitute-substitute-compose (iÃánj‚ÇÅ term) = cong iÃánj‚ÇÅ (substitute-substitute-compose term)
substitute-substitute-compose (iÃánj‚ÇÇ term) = cong iÃánj‚ÇÇ (substitute-substitute-compose term)
substitute-substitute-compose (case+Ãá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ case+Ãá (substitute-substitute-compose term‚ÇÅ) (trans (substitute-substitute-compose term‚ÇÇ) (cong-substitute extend-substitute-compose term‚ÇÇ)) (trans (substitute-substitute-compose term‚ÇÉ) (cong-substitute extend-substitute-compose term‚ÇÉ))
substitute-substitute-compose (term‚ÇÅ ,Ãá term‚ÇÇ) = cong‚ÇÇ _,Ãá_ (substitute-substitute-compose term‚ÇÅ) (substitute-substitute-compose term‚ÇÇ)
substitute-substitute-compose (pÃároj‚ÇÅ term) = cong pÃároj‚ÇÅ (substitute-substitute-compose term)
substitute-substitute-compose (pÃároj‚ÇÇ term) = cong pÃároj‚ÇÇ (substitute-substitute-compose term)
substitute-substitute-compose (case√óÃá {A = A} {B = B} term‚ÇÅ term‚ÇÇ) = cong‚ÇÇ case√óÃá (substitute-substitute-compose term‚ÇÅ) (trans (substitute-substitute-compose term‚ÇÇ) (cong-substitute (extends-substitute-compose {Œñ = [] ‚Äö A ‚Äö B}) term‚ÇÇ))
substitute-substitute-compose [Ãá] = refl
substitute-substitute-compose (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) = cong‚ÇÇ _‚à∑Ãá_ (substitute-substitute-compose term‚ÇÅ) (substitute-substitute-compose term‚ÇÇ)
substitute-substitute-compose (caseLÃáist {A = A} term‚ÇÅ term‚ÇÇ term‚ÇÉ) = cong‚ÇÉ caseLÃáist (substitute-substitute-compose term‚ÇÅ) (substitute-substitute-compose term‚ÇÇ) (trans (substitute-substitute-compose term‚ÇÉ) (cong-substitute (extends-substitute-compose {Œñ = [] ‚Äö A ‚Äö LÃáist A}) term‚ÇÉ))

-- lemma 3: equalities regarding œÉ‚ÇÅ and œÉ‚ÇÇ

extend-œÉ‚ÇÇ : {Œì : Context} ‚Üí {A B C D : Type}
    ‚Üí (term‚ÇÅ : Œì ‚ä¢ A)
    ‚Üí (term‚ÇÇ : Œì ‚ä¢ B)
    ‚Üí (index : Œì ‚Äö A ‚Äö B ‚Äö D ‚àã C)
    ‚Üí (substitute (extend (œÉ‚ÇÅ term‚ÇÅ)) ‚àò extend (œÉ‚ÇÅ (shift term‚ÇÇ))) index ‚â° extend (œÉ‚ÇÇ term‚ÇÅ term‚ÇÇ) index
extend-œÉ‚ÇÇ term‚ÇÅ term‚ÇÇ here = refl
extend-œÉ‚ÇÇ term‚ÇÅ term‚ÇÇ (there here) =
    trans
        ((extend-substitute-compose {œÉ‚ÇÅ = œÉ‚ÇÅ (shift term‚ÇÇ)} {œÉ‚ÇÇ = œÉ‚ÇÅ term‚ÇÅ} (there here)))
        (cong shift (substitute-shift term‚ÇÇ term‚ÇÅ))
extend-œÉ‚ÇÇ term‚ÇÅ term‚ÇÇ (there (there here)) =
    trans
        ((extend-substitute-compose {œÉ‚ÇÅ = œÉ‚ÇÅ (shift term‚ÇÇ)} {œÉ‚ÇÇ = œÉ‚ÇÅ term‚ÇÅ} (there (there here))))
        (cong shift refl)
extend-œÉ‚ÇÇ term‚ÇÅ term‚ÇÇ (there (there (there index))) = refl

extends-œÉ‚ÇÇ : {Œì Œî : Context} ‚Üí {A B C : Type}
    ‚Üí (term‚ÇÅ : Œì ‚ä¢ A)
    ‚Üí (term‚ÇÇ : Œì ‚ä¢ B)
    ‚Üí (index : Œì ‚Äö A ‚Äö B ‚Äö‚Äö Œî ‚àã C)
    ‚Üí (substitute (extends (œÉ‚ÇÅ term‚ÇÅ)) ‚àò extends (œÉ‚ÇÅ (shift term‚ÇÇ))) index ‚â° extends (œÉ‚ÇÇ term‚ÇÅ term‚ÇÇ) index
extends-œÉ‚ÇÇ {Œî = []} term‚ÇÅ term‚ÇÇ here = substitute-shift term‚ÇÇ term‚ÇÅ
extends-œÉ‚ÇÇ {Œî = []} term‚ÇÅ term‚ÇÇ (there here) = refl
extends-œÉ‚ÇÇ {Œî = []} term‚ÇÅ term‚ÇÇ (there (there index)) = refl
extends-œÉ‚ÇÇ {Œî = Œî ‚Äö D} term‚ÇÅ term‚ÇÇ here = refl
extends-œÉ‚ÇÇ {Œî = Œî ‚Äö D} term‚ÇÅ term‚ÇÇ (there index) = trans (extend-substitute-compose {œÉ‚ÇÅ = extends (œÉ‚ÇÅ (shift term‚ÇÇ))} (there index)) (cong shift (extends-œÉ‚ÇÇ term‚ÇÅ term‚ÇÇ index))

-- double substitution

double-substitute : {Œì : Context} ‚Üí {A B C : Type}
    ‚Üí (term‚ÇÅ : Œì ‚Äö A ‚Äö B ‚ä¢ C)
    ‚Üí (term‚ÇÇ : Œì ‚ä¢ A)
    ‚Üí (term‚ÇÉ : Œì ‚ä¢ B)
    ‚Üí term‚ÇÅ [ shift term‚ÇÉ ] [ term‚ÇÇ ] ‚â° term‚ÇÅ [ term‚ÇÇ ][ term‚ÇÉ ]
double-substitute (lookup index) term‚ÇÇ term‚ÇÉ = extends-œÉ‚ÇÇ term‚ÇÇ term‚ÇÉ index
double-substitute (ŒªÃá term‚ÇÅ) term‚ÇÇ term‚ÇÉ = cong ŒªÃá_ (trans (substitute-substitute-compose term‚ÇÅ) (cong-substitute (extend-œÉ‚ÇÇ term‚ÇÇ term‚ÇÉ) term‚ÇÅ))
double-substitute (term‚ÇÅ‚ÇÅ ¬∑ term‚ÇÅ‚ÇÇ) term‚ÇÇ term‚ÇÉ = cong‚ÇÇ _¬∑_ (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (double-substitute term‚ÇÅ‚ÇÇ term‚ÇÇ term‚ÇÉ)
double-substitute zÃáero term‚ÇÇ term‚ÇÉ = refl
double-substitute (sÃáuc term‚ÇÅ) term‚ÇÇ term‚ÇÉ = cong sÃáuc_ (double-substitute term‚ÇÅ term‚ÇÇ term‚ÇÉ)
double-substitute (case‚ÑïÃá term‚ÇÅ‚ÇÅ term‚ÇÅ‚ÇÇ term‚ÇÅ‚ÇÉ) term‚ÇÇ term‚ÇÉ = cong‚ÇÉ case‚ÑïÃá (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (double-substitute term‚ÇÅ‚ÇÇ term‚ÇÇ term‚ÇÉ) (trans (substitute-substitute-compose term‚ÇÅ‚ÇÉ) (cong-substitute (extend-œÉ‚ÇÇ term‚ÇÇ term‚ÇÉ) term‚ÇÅ‚ÇÉ))
double-substitute (ŒºÃá term‚ÇÅ) term‚ÇÇ term‚ÇÉ = cong ŒºÃá_ (trans (substitute-substitute-compose term‚ÇÅ) (cong-substitute (extend-œÉ‚ÇÇ term‚ÇÇ term‚ÇÉ) term‚ÇÅ))
double-substitute (lÃáet term‚ÇÅ‚ÇÅ term‚ÇÅ‚ÇÇ) term‚ÇÇ term‚ÇÉ = cong‚ÇÇ lÃáet (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (trans (substitute-substitute-compose term‚ÇÅ‚ÇÇ) (cong-substitute (extend-œÉ‚ÇÇ term‚ÇÇ term‚ÇÉ) term‚ÇÅ‚ÇÇ))
double-substitute (prim n) term‚ÇÇ term‚ÇÉ = refl
double-substitute zÃÇero term‚ÇÇ term‚ÇÉ = refl
double-substitute (sÃÇuc term‚ÇÅ) term‚ÇÇ term‚ÇÉ = cong sÃÇuc_ (double-substitute term‚ÇÅ term‚ÇÇ term‚ÇÉ)
double-substitute (term‚ÇÅ‚ÇÅ +ÃÇ term‚ÇÅ‚ÇÇ) term‚ÇÇ term‚ÇÉ = cong‚ÇÇ _+ÃÇ_ (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (double-substitute term‚ÇÅ‚ÇÇ term‚ÇÇ term‚ÇÉ)
double-substitute (term‚ÇÅ‚ÇÅ *ÃÇ term‚ÇÅ‚ÇÇ) term‚ÇÇ term‚ÇÉ = cong‚ÇÇ _*ÃÇ_ (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (double-substitute term‚ÇÅ‚ÇÇ term‚ÇÇ term‚ÇÉ)
double-substitute (caseùüòÃá term‚ÇÅ) term‚ÇÇ term‚ÇÉ = cong caseùüòÃá (double-substitute term‚ÇÅ term‚ÇÇ term‚ÇÉ)
double-substitute tÃát term‚ÇÇ term‚ÇÉ = refl
double-substitute (caseùüôÃá term‚ÇÅ‚ÇÅ term‚ÇÅ‚ÇÇ) term‚ÇÇ term‚ÇÉ = cong‚ÇÇ caseùüôÃá (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (double-substitute term‚ÇÅ‚ÇÇ term‚ÇÇ term‚ÇÉ)
double-substitute (iÃánj‚ÇÅ term‚ÇÅ) term‚ÇÇ term‚ÇÉ = cong iÃánj‚ÇÅ (double-substitute term‚ÇÅ term‚ÇÇ term‚ÇÉ)
double-substitute (iÃánj‚ÇÇ term‚ÇÅ) term‚ÇÇ term‚ÇÉ = cong iÃánj‚ÇÇ (double-substitute term‚ÇÅ term‚ÇÇ term‚ÇÉ)
double-substitute (case+Ãá term‚ÇÅ‚ÇÅ term‚ÇÅ‚ÇÇ term‚ÇÅ‚ÇÉ) term‚ÇÇ term‚ÇÉ = cong‚ÇÉ case+Ãá (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (trans (substitute-substitute-compose term‚ÇÅ‚ÇÇ) (cong-substitute (extend-œÉ‚ÇÇ term‚ÇÇ term‚ÇÉ) term‚ÇÅ‚ÇÇ)) (trans (substitute-substitute-compose term‚ÇÅ‚ÇÉ) (cong-substitute (extend-œÉ‚ÇÇ term‚ÇÇ term‚ÇÉ) term‚ÇÅ‚ÇÉ))
double-substitute (term‚ÇÅ‚ÇÅ ,Ãá term‚ÇÅ‚ÇÇ) term‚ÇÇ term‚ÇÉ = cong‚ÇÇ _,Ãá_ (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (double-substitute term‚ÇÅ‚ÇÇ term‚ÇÇ term‚ÇÉ)
double-substitute (pÃároj‚ÇÅ term‚ÇÅ) term‚ÇÇ term‚ÇÉ = cong pÃároj‚ÇÅ (double-substitute term‚ÇÅ term‚ÇÇ term‚ÇÉ)
double-substitute (pÃároj‚ÇÇ term‚ÇÅ) term‚ÇÇ term‚ÇÉ = cong pÃároj‚ÇÇ (double-substitute term‚ÇÅ term‚ÇÇ term‚ÇÉ)
double-substitute (case√óÃá term‚ÇÅ‚ÇÅ term‚ÇÅ‚ÇÇ) term‚ÇÇ term‚ÇÉ = cong‚ÇÇ case√óÃá (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (trans (substitute-substitute-compose term‚ÇÅ‚ÇÇ) (cong-substitute (extends-œÉ‚ÇÇ term‚ÇÇ term‚ÇÉ) term‚ÇÅ‚ÇÇ))
double-substitute [Ãá] term‚ÇÇ term‚ÇÉ = refl
double-substitute (term‚ÇÅ‚ÇÅ ‚à∑Ãá term‚ÇÅ‚ÇÇ) term‚ÇÇ term‚ÇÉ = cong‚ÇÇ _‚à∑Ãá_ (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (double-substitute term‚ÇÅ‚ÇÇ term‚ÇÇ term‚ÇÉ)
double-substitute (caseLÃáist term‚ÇÅ‚ÇÅ term‚ÇÅ‚ÇÇ term‚ÇÅ‚ÇÉ) term‚ÇÇ term‚ÇÉ = cong‚ÇÉ caseLÃáist (double-substitute term‚ÇÅ‚ÇÅ term‚ÇÇ term‚ÇÉ) (double-substitute term‚ÇÅ‚ÇÇ term‚ÇÇ term‚ÇÉ) (trans (substitute-substitute-compose term‚ÇÅ‚ÇÉ) (cong-substitute (extends-œÉ‚ÇÇ term‚ÇÇ term‚ÇÉ) term‚ÇÅ‚ÇÉ))
