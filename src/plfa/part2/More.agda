{-# OPTIONS --without-K #-}

module plfa.part2.More where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _*_; _<_; _<?_; z‚â§n; s‚â§s)
open import Data.List using (List; []; _‚à∑_)
open import Function using (_‚àò_; flip)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Decidable using (True; toWitness)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong; subst)

infixr 7 _‚ÜíÃá_
infixr 8 _+Ãá_
infixr 9 _√óÃá_

data Type : Set where
    ‚ÑïÃá : Type
    ‚ÑïÃÇ : Type -- primitive natural numbers
    ùüôÃá : Type -- unit type
    ùüòÃá : Type -- empty type
    _‚ÜíÃá_ : Type ‚Üí Type ‚Üí Type
    _√óÃá_ : Type ‚Üí Type ‚Üí Type -- product type
    _+Ãá_ : Type ‚Üí Type ‚Üí Type -- sum type
    LÃáist : Type ‚Üí Type -- list type

Context : Set
Context = List Type

infixl 5 _‚Äö_ -- '‚Äö': U+201A
pattern _‚Äö_ Œì A = A ‚à∑ Œì

infix 4 _‚àã_
data _‚àã_ : Context ‚Üí Type ‚Üí Set where
    here : {Œì : Context} ‚Üí {A : Type}
        ‚Üí Œì ‚Äö A ‚àã A
    there : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí Œì ‚àã A
        ‚Üí Œì ‚Äö B ‚àã A

infix 4 _‚ä¢_

infix 5 ŒªÃá_
infix 5 ŒºÃá_
infixl 7 _¬∑_
infix 8 sÃáuc_
infix 8 sÃÇuc_
infixl 7 _+ÃÇ_
infixl 8 _*ÃÇ_
infixr 4 _,Ãá_
infixr 5 _‚à∑Ãá_

data _‚ä¢_ : Context ‚Üí Type ‚Üí Set where
    -- variables
    ‚ä¢lookup : {Œì : Context} ‚Üí {A : Type}
        ‚Üí Œì ‚àã A
        ‚Üí Œì ‚ä¢ A
    -- function type
    ŒªÃá_ : {Œì : Context} ‚Üí {A B : Type} -- lambda abstraction (introdcution)
        ‚Üí Œì ‚Äö A ‚ä¢ B
        ‚Üí Œì ‚ä¢ A ‚ÜíÃá B
    _¬∑_ : {Œì : Context} ‚Üí {A B : Type} -- function application (elimination)
        ‚Üí Œì ‚ä¢ A ‚ÜíÃá B
        ‚Üí Œì ‚ä¢ A
        ‚Üí Œì ‚ä¢ B
    -- natural number type
    zÃáero : {Œì : Context}
        ‚Üí Œì ‚ä¢ ‚ÑïÃá
    sÃáuc_ : {Œì : Context}
        ‚Üí Œì ‚ä¢ ‚ÑïÃá
        ‚Üí Œì ‚ä¢ ‚ÑïÃá
    case‚ÑïÃá : {Œì : Context} ‚Üí {A : Type}
        ‚Üí Œì ‚ä¢ ‚ÑïÃá
        ‚Üí Œì ‚ä¢ A
        ‚Üí Œì ‚Äö ‚ÑïÃá ‚ä¢ A
        ‚Üí Œì ‚ä¢ A
    -- fixpoint operator
    ŒºÃá_ : {Œì : Context} ‚Üí {A : Type}
        ‚Üí Œì ‚Äö A ‚ä¢ A
        ‚Üí Œì ‚ä¢ A
    -- let binding
    lÃáet : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí Œì ‚ä¢ A
        ‚Üí Œì ‚Äö A ‚ä¢ B
        ‚Üí Œì ‚ä¢ B
    -- primitive natural number type
    prim : {Œì : Context} -- primitive natural numbers
        ‚Üí ‚Ñï
        ‚Üí Œì ‚ä¢ ‚ÑïÃÇ
    sÃÇuc_ : {Œì : Context} -- primitive natural number successor
        ‚Üí Œì ‚ä¢ ‚ÑïÃÇ
        ‚Üí Œì ‚ä¢ ‚ÑïÃÇ
    _+ÃÇ_ : {Œì : Context} -- primitive natural number addition
        ‚Üí Œì ‚ä¢ ‚ÑïÃÇ
        ‚Üí Œì ‚ä¢ ‚ÑïÃÇ
        ‚Üí Œì ‚ä¢ ‚ÑïÃÇ
    _*ÃÇ_ : {Œì : Context} -- primitive natural number multiplication
        ‚Üí Œì ‚ä¢ ‚ÑïÃÇ
        ‚Üí Œì ‚ä¢ ‚ÑïÃÇ
        ‚Üí Œì ‚ä¢ ‚ÑïÃÇ
    -- empty type (initial)
    caseùüòÃá : {Œì : Context} ‚Üí {A : Type} -- empty type full elimination (recursion/induction)
        ‚Üí Œì ‚ä¢ ùüòÃá
        ‚Üí Œì ‚ä¢ A
    -- unit type (terminal)
    tÃát : {Œì : Context} -- unit type introduction
        ‚Üí Œì ‚ä¢ ùüôÃá
    caseùüôÃá : {Œì : Context} ‚Üí {A : Type} -- unit type full elimination (recursion/induction)
        ‚Üí Œì ‚ä¢ ùüôÃá
        ‚Üí Œì ‚ä¢ A
        ‚Üí Œì ‚ä¢ A
    -- sum type (coproduct)
    iÃánj‚ÇÅ : {Œì : Context} ‚Üí {A B : Type} -- product type introduction 1
        ‚Üí Œì ‚ä¢ A
        ‚Üí Œì ‚ä¢ A +Ãá B
    iÃánj‚ÇÇ : {Œì : Context} ‚Üí {A B : Type} -- product type introduction 2
        ‚Üí Œì ‚ä¢ B
        ‚Üí Œì ‚ä¢ A +Ãá B
    case+Ãá : {Œì : Context} ‚Üí {A B C : Type} -- product type full elimination (recursion/induction)
        ‚Üí Œì ‚ä¢ A +Ãá B
        ‚Üí Œì ‚Äö A ‚ä¢ C
        ‚Üí Œì ‚Äö B ‚ä¢ C
        ‚Üí Œì ‚ä¢ C
    -- product type
    _,Ãá_ : {Œì : Context} ‚Üí {A B : Type} -- product type introduction
        ‚Üí Œì ‚ä¢ A
        ‚Üí Œì ‚ä¢ B
        ‚Üí Œì ‚ä¢ A √óÃá B
    pÃároj‚ÇÅ : {Œì : Context} ‚Üí {A B : Type} -- product type elimination 1
        ‚Üí Œì ‚ä¢ A √óÃá B
        ‚Üí Œì ‚ä¢ A
    pÃároj‚ÇÇ : {Œì : Context} ‚Üí {A B : Type} -- product type elimination 2
        ‚Üí Œì ‚ä¢ A √óÃá B
        ‚Üí Œì ‚ä¢ B
    case√óÃá : {Œì : Context} ‚Üí {A B C : Type} -- product type full elimination (recursion/induction)
        ‚Üí Œì ‚ä¢ A √óÃá B
        ‚Üí Œì ‚Äö A ‚Äö B ‚ä¢ C
        ‚Üí Œì ‚ä¢ C
    -- list type
    [Ãá] : {Œì : Context} ‚Üí {A : Type} -- list type introduction nil
        ‚Üí Œì ‚ä¢ LÃáist A
    _‚à∑Ãá_ : {Œì : Context} ‚Üí {A : Type} -- list type introduction cons
        ‚Üí Œì ‚ä¢ A
        ‚Üí Œì ‚ä¢ LÃáist A
        ‚Üí Œì ‚ä¢ LÃáist A
    caseLÃáist : {Œì : Context} ‚Üí {A B : Type} -- list type full elimination (recursion/induction)
        ‚Üí Œì ‚ä¢ LÃáist A
        ‚Üí Œì ‚ä¢ B
        ‚Üí Œì ‚Äö A ‚Äö LÃáist A ‚ä¢ B
        ‚Üí Œì ‚ä¢ B

length : Context ‚Üí ‚Ñï
length [] = zero
length (Œì ‚Äö A) = suc (length Œì)

find : {Œì : Context} ‚Üí {n : ‚Ñï}
    ‚Üí (n < length Œì)
    ‚Üí Type
find {Œì ‚Äö A} {zero} (s‚â§s z‚â§n) = A
find {Œì ‚Äö A} {suc n} (s‚â§s p) = find p

count : {Œì : Context} ‚Üí {n : ‚Ñï}
    ‚Üí (p : n < length Œì)
    ‚Üí Œì ‚àã find p
count {Œì ‚Äö A} {zero} (s‚â§s z‚â§n) = here
count {Œì ‚Äö A} {suc n} (s‚â§s p) = there (count p)

infix 9 #_

#_ : {Œì : Context}
    ‚Üí (n : ‚Ñï)
    ‚Üí {z : True (n <? length Œì)}
    ‚Üí Œì ‚ä¢ find (toWitness z)
#_ n {z} = ‚ä¢lookup (count (toWitness z))

extend : {Œì Œî : Context}
    ‚Üí ({A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A)
    ‚Üí ({A B : Type} ‚Üí Œì ‚Äö B ‚àã A ‚Üí Œî ‚Äö B ‚àã A)
extend œÅ here = here
extend œÅ (there index) = there (œÅ index)

reindex : {Œì Œî : Context}
    ‚Üí ({A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚àã A)
    ‚Üí ({A : Type} ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A)
reindex œÅ (‚ä¢lookup index) = ‚ä¢lookup (œÅ index)
reindex œÅ (ŒªÃá term) = ŒªÃá (reindex (extend œÅ) term)
reindex œÅ (term‚ÇÅ ¬∑ term‚ÇÇ) = (reindex œÅ term‚ÇÅ) ¬∑ (reindex œÅ term‚ÇÇ)
reindex œÅ zÃáero = zÃáero
reindex œÅ (sÃáuc term) = sÃáuc (reindex œÅ term)
reindex œÅ (case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = case‚ÑïÃá (reindex œÅ term‚ÇÅ) (reindex œÅ term‚ÇÇ) (reindex (extend œÅ) term‚ÇÉ)
reindex œÅ (ŒºÃá term) = ŒºÃá (reindex (extend œÅ) term)
reindex œÅ (lÃáet term‚ÇÅ term‚ÇÇ) = lÃáet (reindex œÅ term‚ÇÅ) (reindex (extend œÅ) term‚ÇÇ)
reindex œÅ (prim n) = prim n
reindex œÅ (sÃÇuc term) = sÃÇuc (reindex œÅ term)
reindex œÅ (term‚ÇÅ +ÃÇ term‚ÇÇ) = reindex œÅ term‚ÇÅ +ÃÇ reindex œÅ term‚ÇÇ
reindex œÅ (term‚ÇÅ *ÃÇ term‚ÇÇ) = reindex œÅ term‚ÇÅ *ÃÇ reindex œÅ term‚ÇÇ
reindex œÅ (caseùüòÃá term) = caseùüòÃá (reindex œÅ term)
reindex œÅ tÃát = tÃát
reindex œÅ (caseùüôÃá term‚ÇÅ term‚ÇÇ) = caseùüôÃá (reindex œÅ term‚ÇÅ) (reindex œÅ term‚ÇÇ)
reindex œÅ (iÃánj‚ÇÅ term) = iÃánj‚ÇÅ (reindex œÅ term)
reindex œÅ (iÃánj‚ÇÇ term) = iÃánj‚ÇÇ (reindex œÅ term)
reindex œÅ (case+Ãá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = case+Ãá (reindex œÅ term‚ÇÅ) (reindex (extend œÅ) term‚ÇÇ) (reindex (extend œÅ) term‚ÇÉ)
reindex œÅ (term‚ÇÅ ,Ãá term‚ÇÇ) = (reindex œÅ term‚ÇÅ) ,Ãá (reindex œÅ term‚ÇÇ)
reindex œÅ (pÃároj‚ÇÅ term) = pÃároj‚ÇÅ (reindex œÅ term)
reindex œÅ (pÃároj‚ÇÇ term) = pÃároj‚ÇÇ (reindex œÅ term)
reindex œÅ (case√óÃá term‚ÇÅ term‚ÇÇ) = case√óÃá (reindex œÅ term‚ÇÅ) (reindex (extend (extend œÅ)) term‚ÇÇ)
reindex œÅ [Ãá] = [Ãá]
reindex œÅ (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) = reindex œÅ term‚ÇÅ ‚à∑Ãá reindex œÅ term‚ÇÇ
reindex œÅ (caseLÃáist term‚ÇÅ term‚ÇÇ term‚ÇÉ) = caseLÃáist (reindex œÅ term‚ÇÅ) (reindex œÅ term‚ÇÇ) (reindex (extend (extend œÅ)) term‚ÇÉ)

‚ä¢extend : {Œì Œî : Context}
    ‚Üí ({A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A)
    ‚Üí ({A B : Type} ‚Üí Œì ‚Äö B ‚àã A ‚Üí Œî ‚Äö B ‚ä¢ A)
‚ä¢extend œÉ here = ‚ä¢lookup here
‚ä¢extend œÉ (there index) = reindex there (œÉ index)

substitute : {Œì Œî : Context}
    ‚Üí ({A : Type} ‚Üí Œì ‚àã A ‚Üí Œî ‚ä¢ A)
    ‚Üí ({A : Type} ‚Üí Œì ‚ä¢ A ‚Üí Œî ‚ä¢ A)
substitute œÉ (‚ä¢lookup index) = œÉ index
substitute œÉ (ŒªÃá term) = ŒªÃá substitute (‚ä¢extend œÉ) term
substitute œÉ (term‚ÇÅ ¬∑ term‚ÇÇ) = (substitute œÉ term‚ÇÅ) ¬∑ (substitute œÉ term‚ÇÇ)
substitute œÉ zÃáero = zÃáero
substitute œÉ (sÃáuc term) = sÃáuc substitute œÉ term
substitute œÉ (case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = case‚ÑïÃá (substitute œÉ term‚ÇÅ) (substitute œÉ term‚ÇÇ) (substitute (‚ä¢extend œÉ) term‚ÇÉ)
substitute œÉ (ŒºÃá term) = ŒºÃá substitute (‚ä¢extend œÉ) term
substitute œÉ (lÃáet term‚ÇÅ term‚ÇÇ) = lÃáet (substitute œÉ term‚ÇÅ) (substitute (‚ä¢extend œÉ) term‚ÇÇ)
substitute œÉ (prim n) = prim n
substitute œÉ (sÃÇuc term) = sÃÇuc (substitute œÉ term)
substitute œÉ (term‚ÇÅ +ÃÇ term‚ÇÇ) = substitute œÉ term‚ÇÅ +ÃÇ substitute œÉ term‚ÇÇ
substitute œÉ (term‚ÇÅ *ÃÇ term‚ÇÇ) = substitute œÉ term‚ÇÅ *ÃÇ substitute œÉ term‚ÇÇ
substitute œÉ (caseùüòÃá term) = caseùüòÃá (substitute œÉ term)
substitute œÉ tÃát = tÃát
substitute œÉ (caseùüôÃá term‚ÇÅ term‚ÇÇ) = caseùüôÃá (substitute œÉ term‚ÇÅ) (substitute œÉ term‚ÇÇ)
substitute œÉ (iÃánj‚ÇÅ term) = iÃánj‚ÇÅ (substitute œÉ term)
substitute œÉ (iÃánj‚ÇÇ term) = iÃánj‚ÇÇ (substitute œÉ term)
substitute œÉ (case+Ãá term‚ÇÅ term‚ÇÇ term‚ÇÉ) = case+Ãá (substitute œÉ term‚ÇÅ) (substitute (‚ä¢extend œÉ) term‚ÇÇ) (substitute (‚ä¢extend œÉ) term‚ÇÉ)
substitute œÉ (term‚ÇÅ ,Ãá term‚ÇÇ) = (substitute œÉ term‚ÇÅ) ,Ãá (substitute œÉ term‚ÇÇ)
substitute œÉ (pÃároj‚ÇÅ term) = pÃároj‚ÇÅ (substitute œÉ term)
substitute œÉ (pÃároj‚ÇÇ term) = pÃároj‚ÇÇ (substitute œÉ term)
substitute œÉ (case√óÃá term‚ÇÅ term‚ÇÇ) = case√óÃá (substitute œÉ term‚ÇÅ) (substitute (‚ä¢extend (‚ä¢extend œÉ)) term‚ÇÇ)
substitute œÉ [Ãá] = [Ãá]
substitute œÉ (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) = substitute œÉ term‚ÇÅ ‚à∑Ãá substitute œÉ term‚ÇÇ
substitute œÉ (caseLÃáist term‚ÇÅ term‚ÇÇ term‚ÇÉ) = caseLÃáist (substitute œÉ term‚ÇÅ) (substitute œÉ term‚ÇÇ) (substitute (‚ä¢extend (‚ä¢extend œÉ)) term‚ÇÉ)

_[_] : {Œì : Context} ‚Üí {A B : Type}
    ‚Üí Œì ‚Äö A ‚ä¢ B
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ B
_[_] {Œì} {A} {B} term‚ÇÅ term‚ÇÇ = substitute {Œì ‚Äö A} {Œì} œÉ term‚ÇÅ where
    œÉ : {B : Type} ‚Üí Œì ‚Äö A ‚àã B ‚Üí Œì ‚ä¢ B
    œÉ here = term‚ÇÇ
    œÉ (there index) = ‚ä¢lookup index

_[_][_] : {Œì : Context} ‚Üí {A B C : Type}
    ‚Üí Œì ‚Äö A ‚Äö B ‚ä¢ C
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ B
    ‚Üí Œì ‚ä¢ C
_[_][_] {Œì} {A} {B} {C} term‚ÇÅ term‚ÇÇ term‚ÇÉ = substitute {Œì ‚Äö A ‚Äö B} {Œì} œÉ term‚ÇÅ where
    œÉ : {C : Type} ‚Üí Œì ‚Äö A ‚Äö B ‚àã C ‚Üí Œì ‚ä¢ C
    œÉ here = term‚ÇÉ
    œÉ (there here) = term‚ÇÇ
    œÉ (there (there index)) = ‚ä¢lookup index

-- double-substitute : {Œì : Context} ‚Üí {A B C : Type}
--     ‚Üí (term‚ÇÅ : Œì ‚Äö A ‚Äö B ‚ä¢ C)
--     ‚Üí (term‚ÇÇ : Œì ‚ä¢ A)
--     ‚Üí (term‚ÇÉ : Œì ‚ä¢ B)
--     ‚Üí term‚ÇÅ [ term‚ÇÇ ][ term‚ÇÉ ] ‚â° term‚ÇÅ [ reindex there term‚ÇÉ ] [ term‚ÇÇ ]
-- double-substitute {Œì} {A} {B} {C} term‚ÇÅ term‚ÇÇ term‚ÇÉ = ?

data Value : {Œì : Context} ‚Üí {A : Type} ‚Üí Œì ‚ä¢ A ‚Üí Set where
    value-ŒªÃá : {Œì : Context} ‚Üí {A B : Type} ‚Üí {term : Œì ‚Äö A ‚ä¢ B}
        ‚Üí Value (ŒªÃá term)
    value-zÃáero : {Œì : Context}
        ‚Üí Value (zÃáero {Œì})
    value-sÃáuc : {Œì : Context} ‚Üí {term : Œì ‚ä¢ ‚ÑïÃá}
        ‚Üí Value term
        ‚Üí Value (sÃáuc term)
    value-prim : {Œì : Context} ‚Üí {n : ‚Ñï}
        ‚Üí Value (prim {Œì} n)
    value-tÃát : {Œì : Context}
        ‚Üí Value (tÃát {Œì})
    value-iÃánj‚ÇÅ : {Œì : Context} ‚Üí {A B : Type} ‚Üí {term‚ÇÅ : Œì ‚ä¢ A}
        ‚Üí Value term‚ÇÅ
        ‚Üí Value (iÃánj‚ÇÅ {Œì} {A} {B} term‚ÇÅ)
    value-iÃánj‚ÇÇ : {Œì : Context} ‚Üí {A B : Type} ‚Üí {term‚ÇÇ : Œì ‚ä¢ B}
        ‚Üí Value term‚ÇÇ
        ‚Üí Value (iÃánj‚ÇÇ {Œì} {A} {B} term‚ÇÇ)
    value-,Ãá : {Œì : Context} ‚Üí {A B : Type} ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚ä¢ B}
        ‚Üí Value term‚ÇÅ
        ‚Üí Value term‚ÇÇ
        ‚Üí Value (term‚ÇÅ ,Ãá term‚ÇÇ)
    value-[Ãá] : {Œì : Context} ‚Üí {A : Type}
        ‚Üí Value ([Ãá] {Œì} {A})
    value-‚à∑Ãá : {Œì : Context} ‚Üí {A : Type} ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚ä¢ LÃáist A}
        ‚Üí Value term‚ÇÅ
        ‚Üí Value term‚ÇÇ
        ‚Üí Value (term‚ÇÅ ‚à∑Ãá term‚ÇÇ)

infix 2 _‚ü∂_

data _‚ü∂_ : {Œì : Context} ‚Üí {A : Type} ‚Üí (Œì ‚ä¢ A) ‚Üí (Œì ‚ä¢ A) ‚Üí Set where
    -- beta rules
    Œ≤-ŒªÃá : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ : Œì ‚Äö A ‚ä¢ B} ‚Üí {term‚ÇÇ : Œì ‚ä¢ A}
        ‚Üí Value term‚ÇÇ
        ‚Üí (ŒªÃá term‚ÇÅ) ¬∑ term‚ÇÇ ‚ü∂ term‚ÇÅ [ term‚ÇÇ ] -- call by value reduction (another choice is call by name)
    Œ≤-zÃáero : {Œì : Context} ‚Üí {A : Type}
        ‚Üí {term‚ÇÇ : Œì ‚ä¢ A} ‚Üí {term‚ÇÉ : Œì ‚Äö ‚ÑïÃá ‚ä¢ A}
        ‚Üí case‚ÑïÃá zÃáero term‚ÇÇ term‚ÇÉ ‚ü∂ term‚ÇÇ
    Œ≤-sÃáuc : {Œì : Context} ‚Üí {A : Type}
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ ‚ÑïÃá} ‚Üí {term‚ÇÇ : Œì ‚ä¢ A} ‚Üí {term‚ÇÉ : Œì ‚Äö ‚ÑïÃá ‚ä¢ A}
        ‚Üí Value term‚ÇÅ
        ‚Üí case‚ÑïÃá (sÃáuc term‚ÇÅ) term‚ÇÇ term‚ÇÉ ‚ü∂ term‚ÇÉ [ term‚ÇÅ ]
    Œ≤-ŒºÃá : {Œì : Context} ‚Üí {A : Type}
        ‚Üí {term : Œì ‚Äö A ‚ä¢ A}
        ‚Üí ŒºÃá term ‚ü∂ term [ ŒºÃá term ]
    Œ≤-lÃáet : {Œì : Context} ‚Üí {A B : Type} -- lÃáet term‚ÇÅ term‚ÇÇ ‚â° term‚ÇÇ [ term‚ÇÅ ] ‚â° (ŒªÃá term‚ÇÇ) ¬∑ term‚ÇÅ
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚Äö A ‚ä¢ B}
        ‚Üí Value term‚ÇÅ
        ‚Üí lÃáet term‚ÇÅ term‚ÇÇ ‚ü∂ term‚ÇÇ [ term‚ÇÅ ]
    Œ≤-caseùüôÃá : {Œì : Context} ‚Üí {A : Type}
        ‚Üí {term : Œì ‚ä¢ A}
        ‚Üí caseùüôÃá tÃát term ‚ü∂ term
    Œ≤-iÃánj‚ÇÅ : {Œì : Context} ‚Üí {A B C : Type}
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÉ : Œì ‚Äö A ‚ä¢ C} ‚Üí {term‚ÇÑ : Œì ‚Äö B ‚ä¢ C}
        ‚Üí Value term‚ÇÅ
        ‚Üí case+Ãá (iÃánj‚ÇÅ term‚ÇÅ) term‚ÇÉ term‚ÇÑ ‚ü∂ term‚ÇÉ [ term‚ÇÅ ]
    Œ≤-iÃánj‚ÇÇ : {Œì : Context} ‚Üí {A B C : Type}
        ‚Üí {term‚ÇÇ : Œì ‚ä¢ B} ‚Üí {term‚ÇÉ : Œì ‚Äö A ‚ä¢ C} ‚Üí {term‚ÇÑ : Œì ‚Äö B ‚ä¢ C}
        ‚Üí Value term‚ÇÇ
        ‚Üí case+Ãá (iÃánj‚ÇÇ term‚ÇÇ) term‚ÇÉ term‚ÇÑ ‚ü∂ term‚ÇÑ [ term‚ÇÇ ]
    Œ≤-pÃároj‚ÇÅ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚ä¢ B}
        ‚Üí Value term‚ÇÅ
        ‚Üí Value term‚ÇÇ
        ‚Üí pÃároj‚ÇÅ (term‚ÇÅ ,Ãá term‚ÇÇ) ‚ü∂ term‚ÇÅ
    Œ≤-pÃároj‚ÇÇ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚ä¢ B}
        ‚Üí Value term‚ÇÅ
        ‚Üí Value term‚ÇÇ
        ‚Üí pÃároj‚ÇÇ (term‚ÇÅ ,Ãá term‚ÇÇ) ‚ü∂ term‚ÇÇ
    Œ≤-case√óÃá : {Œì : Context} ‚Üí {A B C : Type}
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚ä¢ B} ‚Üí {term‚ÇÉ : Œì ‚Äö A ‚Äö B ‚ä¢ C}
        ‚Üí Value term‚ÇÅ
        ‚Üí Value term‚ÇÇ
        ‚Üí case√óÃá (term‚ÇÅ ,Ãá term‚ÇÇ) term‚ÇÉ ‚ü∂ term‚ÇÉ [ term‚ÇÅ ][ term‚ÇÇ ]
    Œ≤-[Ãá] : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÇ : Œì ‚ä¢ B} ‚Üí {term‚ÇÉ : Œì ‚Äö A ‚Äö LÃáist A ‚ä¢ B}
        ‚Üí caseLÃáist [Ãá] term‚ÇÇ term‚ÇÉ ‚ü∂ term‚ÇÇ
    Œ≤-‚à∑Ãá : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚ä¢ LÃáist A} ‚Üí {term‚ÇÉ : Œì ‚ä¢ B} ‚Üí {term‚ÇÑ : Œì ‚Äö A ‚Äö LÃáist A ‚ä¢ B}
        ‚Üí Value term‚ÇÅ
        ‚Üí Value term‚ÇÇ
        ‚Üí caseLÃáist (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) term‚ÇÉ term‚ÇÑ ‚ü∂ term‚ÇÑ [ term‚ÇÅ ][ term‚ÇÇ ]
    -- delta rules (primitive types)
    Œ¥-sÃÇuc : {Œì : Context} ‚Üí {n : ‚Ñï}
        ‚Üí sÃÇuc (prim {Œì} n) ‚ü∂ prim (suc n)
    Œ¥-+ÃÇ : {Œì : Context} ‚Üí {n m : ‚Ñï}
        ‚Üí (prim {Œì} n) +ÃÇ (prim m) ‚ü∂ prim (n + m)
    Œ¥-*ÃÇ : {Œì : Context} ‚Üí {n m : ‚Ñï}
        ‚Üí (prim {Œì} n) *ÃÇ (prim m) ‚ü∂ prim (n * m)
    -- xi rules (compatibility)
    Œæ-¬∑‚ÇÅ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ A ‚ÜíÃá B} ‚Üí {term‚ÇÇ : Œì ‚ä¢ A}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí term‚ÇÅ ¬∑ term‚ÇÇ ‚ü∂ term‚ÇÅ‚Ä≤ ¬∑ term‚ÇÇ
    Œæ-¬∑‚ÇÇ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ A ‚ÜíÃá B} ‚Üí {term‚ÇÇ term‚ÇÇ‚Ä≤ : Œì ‚ä¢ A}
        ‚Üí Value term‚ÇÅ
        ‚Üí term‚ÇÇ ‚ü∂ term‚ÇÇ‚Ä≤
        ‚Üí term‚ÇÅ ¬∑ term‚ÇÇ ‚ü∂ term‚ÇÅ ¬∑ term‚ÇÇ‚Ä≤ -- this reduction strategy is done left to right
    Œæ-sÃáuc : {Œì : Context}
        ‚Üí {term term‚Ä≤ : Œì ‚ä¢ ‚ÑïÃá}
        ‚Üí term ‚ü∂ term‚Ä≤
        ‚Üí sÃáuc term ‚ü∂ sÃáuc term‚Ä≤
    Œæ-case‚ÑïÃá : {Œì : Context} ‚Üí {A : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ ‚ÑïÃá} ‚Üí {term‚ÇÇ : Œì ‚ä¢ A} ‚Üí {term‚ÇÉ : Œì ‚Äö ‚ÑïÃá ‚ä¢ A}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ ‚ü∂ case‚ÑïÃá term‚ÇÅ‚Ä≤ term‚ÇÇ term‚ÇÉ
    Œæ-lÃáet : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚Äö A ‚ä¢ B}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí lÃáet term‚ÇÅ term‚ÇÇ ‚ü∂ lÃáet term‚ÇÅ‚Ä≤ term‚ÇÇ
    Œæ-sÃÇuc : {Œì : Context}
        ‚Üí {term term‚Ä≤ : Œì ‚ä¢ ‚ÑïÃÇ}
        ‚Üí term ‚ü∂ term‚Ä≤
        ‚Üí sÃÇuc term ‚ü∂ sÃÇuc term‚Ä≤
    Œæ-+ÃÇ‚ÇÅ : {Œì : Context}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ term‚ÇÇ : Œì ‚ä¢ ‚ÑïÃÇ}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí term‚ÇÅ +ÃÇ term‚ÇÇ ‚ü∂ term‚ÇÅ‚Ä≤ +ÃÇ term‚ÇÇ
    Œæ-+ÃÇ‚ÇÇ : {Œì : Context}
        ‚Üí {term‚ÇÅ term‚ÇÇ term‚ÇÇ‚Ä≤ : Œì ‚ä¢ ‚ÑïÃÇ}
        ‚Üí Value term‚ÇÅ
        ‚Üí term‚ÇÇ ‚ü∂ term‚ÇÇ‚Ä≤
        ‚Üí term‚ÇÅ +ÃÇ term‚ÇÇ ‚ü∂ term‚ÇÅ +ÃÇ term‚ÇÇ‚Ä≤
    Œæ-*ÃÇ‚ÇÅ : {Œì : Context}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ term‚ÇÇ : Œì ‚ä¢ ‚ÑïÃÇ}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí term‚ÇÅ *ÃÇ term‚ÇÇ ‚ü∂ term‚ÇÅ‚Ä≤ *ÃÇ term‚ÇÇ
    Œæ-*ÃÇ‚ÇÇ : {Œì : Context}
        ‚Üí {term‚ÇÅ term‚ÇÇ term‚ÇÇ‚Ä≤ : Œì ‚ä¢ ‚ÑïÃÇ}
        ‚Üí Value term‚ÇÅ
        ‚Üí term‚ÇÇ ‚ü∂ term‚ÇÇ‚Ä≤
        ‚Üí term‚ÇÅ *ÃÇ term‚ÇÇ ‚ü∂ term‚ÇÅ *ÃÇ term‚ÇÇ‚Ä≤
    Œæ-caseùüòÃá : {Œì : Context} ‚Üí {A : Type}
        ‚Üí {term term‚Ä≤ : Œì ‚ä¢ ùüòÃá}
        ‚Üí term ‚ü∂ term‚Ä≤
        ‚Üí caseùüòÃá {Œì} {A} term ‚ü∂ caseùüòÃá term‚Ä≤
    Œæ-caseùüôÃá : {Œì : Context} ‚Üí {A : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ ùüôÃá} ‚Üí {term‚ÇÇ : Œì ‚ä¢ A}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí caseùüôÃá term‚ÇÅ term‚ÇÇ ‚ü∂ caseùüôÃá term‚ÇÅ‚Ä≤ term‚ÇÇ
    Œæ-iÃánj‚ÇÅ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ A}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí iÃánj‚ÇÅ {Œì} {A} {B} term‚ÇÅ ‚ü∂ iÃánj‚ÇÅ term‚ÇÅ‚Ä≤
    Œæ-iÃánj‚ÇÇ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÇ term‚ÇÇ‚Ä≤ : Œì ‚ä¢ B}
        ‚Üí term‚ÇÇ ‚ü∂ term‚ÇÇ‚Ä≤
        ‚Üí iÃánj‚ÇÇ {Œì} {A} {B} term‚ÇÇ ‚ü∂ iÃánj‚ÇÇ term‚ÇÇ‚Ä≤
    Œæ-case+Ãá : {Œì : Context} ‚Üí {A B C : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ A +Ãá B} ‚Üí {term‚ÇÇ : Œì ‚Äö A ‚ä¢ C} ‚Üí {term‚ÇÉ : Œì ‚Äö B ‚ä¢ C}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí case+Ãá term‚ÇÅ term‚ÇÇ term‚ÇÉ ‚ü∂ case+Ãá term‚ÇÅ‚Ä≤ term‚ÇÇ term‚ÇÉ
    Œæ-,Ãá‚ÇÅ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚ä¢ B}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí term‚ÇÅ ,Ãá term‚ÇÇ ‚ü∂ term‚ÇÅ‚Ä≤ ,Ãá term‚ÇÇ
    Œæ-,Ãá‚ÇÇ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ term‚ÇÇ‚Ä≤ : Œì ‚ä¢ B}
        ‚Üí Value term‚ÇÅ
        ‚Üí term‚ÇÇ ‚ü∂ term‚ÇÇ‚Ä≤
        ‚Üí term‚ÇÅ ,Ãá term‚ÇÇ ‚ü∂ term‚ÇÅ ,Ãá term‚ÇÇ‚Ä≤
    Œæ-pÃároj‚ÇÅ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term term‚Ä≤ : Œì ‚ä¢ A √óÃá B}
        ‚Üí term ‚ü∂ term‚Ä≤
        ‚Üí pÃároj‚ÇÅ term ‚ü∂ pÃároj‚ÇÅ term‚Ä≤
    Œæ-pÃároj‚ÇÇ : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term term‚Ä≤ : Œì ‚ä¢ A √óÃá B}
        ‚Üí term ‚ü∂ term‚Ä≤
        ‚Üí pÃároj‚ÇÇ term ‚ü∂ pÃároj‚ÇÇ term‚Ä≤
    Œæ-case√óÃá : {Œì : Context} ‚Üí {A B C : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ A √óÃá B} ‚Üí {term‚ÇÇ : Œì ‚Äö A ‚Äö B ‚ä¢ C}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí case√óÃá term‚ÇÅ term‚ÇÇ ‚ü∂ case√óÃá term‚ÇÅ‚Ä≤ term‚ÇÇ
    Œæ-‚à∑Ãá‚ÇÅ : {Œì : Context} ‚Üí {A : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ : Œì ‚ä¢ LÃáist A}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí term‚ÇÅ ‚à∑Ãá term‚ÇÇ ‚ü∂ term‚ÇÅ‚Ä≤ ‚à∑Ãá term‚ÇÇ
    Œæ-‚à∑Ãá‚ÇÇ : {Œì : Context} ‚Üí {A : Type}
        ‚Üí {term‚ÇÅ : Œì ‚ä¢ A} ‚Üí {term‚ÇÇ term‚ÇÇ‚Ä≤ : Œì ‚ä¢ LÃáist A}
        ‚Üí Value term‚ÇÅ
        ‚Üí term‚ÇÇ ‚ü∂ term‚ÇÇ‚Ä≤
        ‚Üí term‚ÇÅ ‚à∑Ãá term‚ÇÇ ‚ü∂ term‚ÇÅ ‚à∑Ãá term‚ÇÇ‚Ä≤
    Œæ-caseLÃáist : {Œì : Context} ‚Üí {A B : Type}
        ‚Üí {term‚ÇÅ term‚ÇÅ‚Ä≤ : Œì ‚ä¢ LÃáist A} ‚Üí {term‚ÇÇ : Œì ‚ä¢ B} ‚Üí {term‚ÇÉ : Œì ‚Äö A ‚Äö LÃáist A ‚ä¢ B}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÅ‚Ä≤
        ‚Üí caseLÃáist term‚ÇÅ term‚ÇÇ term‚ÇÉ ‚ü∂ caseLÃáist term‚ÇÅ‚Ä≤ term‚ÇÇ term‚ÇÉ

infix 2 _‚ü∂‚ãÜ_
infix 1 begin_
infixr 2 _‚ü∂‚ü®_‚ü©_
infix 3 _‚àé

data _‚ü∂‚ãÜ_ {Œì : Context} {A : Type} : (Œì ‚ä¢ A) ‚Üí (Œì ‚ä¢ A) ‚Üí Set where
    _‚àé : (term : Œì ‚ä¢ A)
        ‚Üí term ‚ü∂‚ãÜ term
    _‚ü∂‚ü®_‚ü©_ : (term‚ÇÅ : Œì ‚ä¢ A) ‚Üí {term‚ÇÇ term‚ÇÉ : Œì ‚ä¢ A}
        ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÇ
        ‚Üí term‚ÇÇ ‚ü∂‚ãÜ term‚ÇÉ
        ‚Üí term‚ÇÅ ‚ü∂‚ãÜ term‚ÇÉ

begin_ : {Œì : Context} ‚Üí {A : Type}
    ‚Üí {term‚ÇÅ term‚ÇÇ : Œì ‚ä¢ A}
    ‚Üí term‚ÇÅ ‚ü∂‚ãÜ term‚ÇÇ
    ‚Üí term‚ÇÅ ‚ü∂‚ãÜ term‚ÇÇ
begin ps = ps

¬¨[value√óreducible] : {Œì : Context} ‚Üí {A : Type}
    ‚Üí {term‚ÇÅ term‚ÇÇ : Œì ‚ä¢ A}
    ‚Üí Value term‚ÇÅ
    ‚Üí ¬¨ (term‚ÇÅ ‚ü∂ term‚ÇÇ)
¬¨[value√óreducible] (value-sÃáuc value) (Œæ-sÃáuc reduction) = ¬¨[value√óreducible] value reduction
¬¨[value√óreducible] (value-iÃánj‚ÇÅ value) (Œæ-iÃánj‚ÇÅ reduction) = ¬¨[value√óreducible] value reduction
¬¨[value√óreducible] (value-iÃánj‚ÇÇ value) (Œæ-iÃánj‚ÇÇ reduction) = ¬¨[value√óreducible] value reduction
¬¨[value√óreducible] (value-,Ãá value‚ÇÅ value‚ÇÇ) (Œæ-,Ãá‚ÇÅ reduction) = ¬¨[value√óreducible] value‚ÇÅ reduction
¬¨[value√óreducible] (value-,Ãá value‚ÇÅ value‚ÇÇ) (Œæ-,Ãá‚ÇÇ value‚ÇÅ‚Ä≤ reduction) = ¬¨[value√óreducible] value‚ÇÇ reduction
¬¨[value√óreducible] (value-‚à∑Ãá value‚ÇÅ value‚ÇÇ) (Œæ-‚à∑Ãá‚ÇÅ reduction) = ¬¨[value√óreducible] value‚ÇÅ reduction
¬¨[value√óreducible] (value-‚à∑Ãá value‚ÇÅ value‚ÇÇ) (Œæ-‚à∑Ãá‚ÇÇ value‚ÇÅ‚Ä≤ reduction) = ¬¨[value√óreducible] value‚ÇÇ reduction

¬¨[reducible√óvalue] : {Œì : Context} ‚Üí {A : Type}
    ‚Üí {term‚ÇÅ term‚ÇÇ : Œì ‚ä¢ A}
    ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÇ
    ‚Üí ¬¨ Value term‚ÇÅ
¬¨[reducible√óvalue] = flip ¬¨[value√óreducible]

data Progress {A : Type} (term : [] ‚ä¢ A) : Set where
    step : {term‚Ä≤ : [] ‚ä¢ A}
        ‚Üí term ‚ü∂ term‚Ä≤
        ‚Üí Progress term
    done : Value term
        ‚Üí Progress term

progress : {A : Type}
    ‚Üí (term : [] ‚ä¢ A)
    ‚Üí Progress term
progress (ŒªÃá term) = done value-ŒªÃá
progress (term‚ÇÅ ¬∑ term‚ÇÇ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-¬∑‚ÇÅ reduction‚ÇÅ)
... | done value-ŒªÃá with progress term‚ÇÇ
...     | step reduction‚ÇÇ = step (Œæ-¬∑‚ÇÇ value-ŒªÃá reduction‚ÇÇ)
...     | done value‚ÇÇ = step (Œ≤-ŒªÃá value‚ÇÇ)
progress zÃáero = done value-zÃáero
progress (sÃáuc term) with progress term
... | step reduction = step (Œæ-sÃáuc reduction)
... | done value = done (value-sÃáuc value)
progress (case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-case‚ÑïÃá reduction‚ÇÅ)
... | done value-zÃáero = step Œ≤-zÃáero
... | done (value-sÃáuc value‚ÇÅ) = step (Œ≤-sÃáuc value‚ÇÅ)
progress (ŒºÃá term) = step Œ≤-ŒºÃá
progress (lÃáet term‚ÇÅ term‚ÇÇ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-lÃáet reduction‚ÇÅ)
... | done value‚ÇÅ = step (Œ≤-lÃáet value‚ÇÅ)
progress (prim n) = done value-prim
progress (sÃÇuc term) with progress term
... | step reduction = step (Œæ-sÃÇuc reduction)
... | done value-prim = step Œ¥-sÃÇuc
progress (term‚ÇÅ +ÃÇ term‚ÇÇ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-+ÃÇ‚ÇÅ reduction‚ÇÅ)
... | done value-prim with progress term‚ÇÇ
...     | step reduction‚ÇÇ = step (Œæ-+ÃÇ‚ÇÇ value-prim reduction‚ÇÇ)
...     | done value-prim = step Œ¥-+ÃÇ
progress (term‚ÇÅ *ÃÇ term‚ÇÇ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-*ÃÇ‚ÇÅ reduction‚ÇÅ)
... | done value-prim with progress term‚ÇÇ
...     | step reduction‚ÇÇ = step (Œæ-*ÃÇ‚ÇÇ value-prim reduction‚ÇÇ)
...     | done value-prim = step Œ¥-*ÃÇ
progress (caseùüòÃá term) with progress term
... | step reduction = step (Œæ-caseùüòÃá reduction)
progress tÃát = done value-tÃát
progress (caseùüôÃá term‚ÇÅ term‚ÇÇ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-caseùüôÃá reduction‚ÇÅ)
... | done value-tÃát = step Œ≤-caseùüôÃá
progress (iÃánj‚ÇÅ term‚ÇÅ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-iÃánj‚ÇÅ reduction‚ÇÅ)
... | done value‚ÇÅ = done (value-iÃánj‚ÇÅ value‚ÇÅ)
progress (iÃánj‚ÇÇ term‚ÇÇ) with progress term‚ÇÇ
... | step reduction‚ÇÇ = step (Œæ-iÃánj‚ÇÇ reduction‚ÇÇ)
... | done value‚ÇÇ = done (value-iÃánj‚ÇÇ value‚ÇÇ)
progress (case+Ãá term‚ÇÅ term‚ÇÇ term‚ÇÉ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-case+Ãá reduction‚ÇÅ)
... | done (value-iÃánj‚ÇÅ value‚ÇÅ) = step (Œ≤-iÃánj‚ÇÅ value‚ÇÅ)
... | done (value-iÃánj‚ÇÇ value‚ÇÅ) = step (Œ≤-iÃánj‚ÇÇ value‚ÇÅ)
progress (term‚ÇÅ ,Ãá term‚ÇÇ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-,Ãá‚ÇÅ reduction‚ÇÅ)
... | done value‚ÇÅ with progress term‚ÇÇ
...     | step reduction‚ÇÇ = step (Œæ-,Ãá‚ÇÇ value‚ÇÅ reduction‚ÇÇ)
...     | done value‚ÇÇ = done (value-,Ãá value‚ÇÅ value‚ÇÇ)
progress (pÃároj‚ÇÅ term) with progress term
... | step reduction = step (Œæ-pÃároj‚ÇÅ reduction)
... | done (value-,Ãá value‚ÇÅ value‚ÇÇ) = step (Œ≤-pÃároj‚ÇÅ value‚ÇÅ value‚ÇÇ)
progress (pÃároj‚ÇÇ term) with progress term
... | step reduction = step (Œæ-pÃároj‚ÇÇ reduction)
... | done (value-,Ãá value‚ÇÅ value‚ÇÇ) = step (Œ≤-pÃároj‚ÇÇ value‚ÇÅ value‚ÇÇ)
progress (case√óÃá term‚ÇÅ term‚ÇÇ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-case√óÃá reduction‚ÇÅ)
... | done (value-,Ãá value‚ÇÅ value‚ÇÇ) = step (Œ≤-case√óÃá value‚ÇÅ value‚ÇÇ)
progress [Ãá] = done value-[Ãá]
progress (term‚ÇÅ ‚à∑Ãá term‚ÇÇ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-‚à∑Ãá‚ÇÅ reduction‚ÇÅ)
... | done value‚ÇÅ with progress term‚ÇÇ
...     | step reduction‚ÇÇ = step (Œæ-‚à∑Ãá‚ÇÇ value‚ÇÅ reduction‚ÇÇ)
...     | done value‚ÇÇ = done (value-‚à∑Ãá value‚ÇÅ value‚ÇÇ)
progress (caseLÃáist term‚ÇÅ term‚ÇÇ term‚ÇÉ) with progress term‚ÇÅ
... | step reduction‚ÇÅ = step (Œæ-caseLÃáist reduction‚ÇÅ)
... | done value-[Ãá] = step Œ≤-[Ãá]
... | done (value-‚à∑Ãá value‚ÇÅ value‚ÇÇ) = step (Œ≤-‚à∑Ãá value‚ÇÅ value‚ÇÇ)

value? : {A : Type}
    ‚Üí (term : [] ‚ä¢ A)
    ‚Üí Dec (Value term)
value? term with progress term
... | step reduction = no (¬¨[reducible√óvalue] reduction)
... | done value = yes value
-- value? typing with progress typing
-- ... | step p = no (¬¨[reducible√óvalue] p)
-- ... | done value = yes value

record Gas : Set where
    constructor gas
    field
        amount : ‚Ñï

data Finished {Œì : Context} {A : Type} (term : Œì ‚ä¢ A) : Set where
    done : Value term ‚Üí Finished term
    out-of-gas : Finished term

data Steps {A : Type} (term : [] ‚ä¢ A) : Set where
    steps : {term‚Ä≤ : [] ‚ä¢ A}
        ‚Üí term ‚ü∂‚ãÜ term‚Ä≤
        ‚Üí Finished term‚Ä≤
        ‚Üí Steps term

eval : {A : Type} ‚Üí Gas
    ‚Üí (term : [] ‚ä¢ A)
    ‚Üí Steps term
eval (gas zero) term = steps (term ‚àé) out-of-gas
eval (gas (suc amount)) term with progress term
... | done value = steps (term ‚àé) (done value)
... | step {term‚Ä≤} reduction with eval (gas amount) term‚Ä≤
...     | steps reductions finished = steps (term ‚ü∂‚ü® reduction ‚ü© reductions) finished

cube : [] ‚ä¢ ‚ÑïÃÇ ‚ÜíÃá ‚ÑïÃÇ
cube = ŒªÃá # 0 *ÃÇ # 0 *ÃÇ # 0

test : [] ‚ä¢ ‚ÑïÃÇ ‚ÜíÃá ‚ÑïÃÇ ‚ÜíÃá ‚ÑïÃÇ ‚ÜíÃá ‚ÑïÃÇ
test = ŒªÃá ŒªÃá ŒªÃá sÃÇuc (# 2 *ÃÇ # 1 +ÃÇ # 0)

_ : cube ¬∑ (prim 2) ‚ü∂‚ãÜ (prim 8)
_ = begin
        cube ¬∑ (prim 2)
    ‚ü∂‚ü® Œ≤-ŒªÃá value-prim ‚ü©
        (prim 2) *ÃÇ (prim 2) *ÃÇ (prim 2)
    ‚ü∂‚ü® Œæ-*ÃÇ‚ÇÅ Œ¥-*ÃÇ ‚ü©
        (prim 4) *ÃÇ (prim 2)
    ‚ü∂‚ü® Œ¥-*ÃÇ ‚ü©
        prim 8
    ‚àé

exp10 : [] ‚ä¢ ‚ÑïÃÇ ‚ÜíÃá ‚ÑïÃÇ
exp10 = ŒªÃá (lÃáet (# 0 *ÃÇ # 0) (lÃáet (# 0 *ÃÇ # 0) (lÃáet (# 0 *ÃÇ # 2) (# 0 *ÃÇ # 0))))

_ : exp10 ¬∑ (prim 2) ‚ü∂‚ãÜ (prim 1024)
_ = begin
        exp10 ¬∑ prim 2
    ‚ü∂‚ü® Œ≤-ŒªÃá value-prim ‚ü©
        lÃáet (prim 2 *ÃÇ prim 2) (lÃáet (# 0 *ÃÇ # 0) (lÃáet (# 0 *ÃÇ prim 2) (# 0 *ÃÇ # 0)))
    ‚ü∂‚ü® Œæ-lÃáet Œ¥-*ÃÇ ‚ü©
        lÃáet (prim 4) (lÃáet (# 0 *ÃÇ # 0) (lÃáet (# 0 *ÃÇ prim 2) (# 0 *ÃÇ # 0)))
    ‚ü∂‚ü® Œ≤-lÃáet value-prim ‚ü©
        lÃáet (prim 4 *ÃÇ prim 4) (lÃáet (# 0 *ÃÇ prim 2) (# 0 *ÃÇ # 0))
    ‚ü∂‚ü® Œæ-lÃáet Œ¥-*ÃÇ ‚ü©
        lÃáet (prim 16) (lÃáet (# 0 *ÃÇ prim 2) (# 0 *ÃÇ # 0))
    ‚ü∂‚ü® Œ≤-lÃáet value-prim ‚ü©
        lÃáet (prim 16 *ÃÇ prim 2) (# 0 *ÃÇ # 0)
    ‚ü∂‚ü® Œæ-lÃáet Œ¥-*ÃÇ ‚ü©
        lÃáet (prim 32) (# 0 *ÃÇ # 0)
    ‚ü∂‚ü® Œ≤-lÃáet value-prim ‚ü©
        prim 32 *ÃÇ prim 32
    ‚ü∂‚ü® Œ¥-*ÃÇ ‚ü©
        prim 1024
    ‚àé

swap√óÃá : {A B : Type} ‚Üí [] ‚ä¢ A √óÃá B ‚ÜíÃá B √óÃá A
swap√óÃá = ŒªÃá (pÃároj‚ÇÇ (# 0) ,Ãá pÃároj‚ÇÅ (# 0))

_ : swap√óÃá ¬∑ (prim 42 ,Ãá zÃáero) ‚ü∂‚ãÜ (zÃáero ,Ãá prim 42)
_ = begin
        swap√óÃá ¬∑ (prim 42 ,Ãá zÃáero)
    ‚ü∂‚ü® Œ≤-ŒªÃá (value-,Ãá value-prim value-zÃáero) ‚ü©
        pÃároj‚ÇÇ (prim 42 ,Ãá zÃáero) ,Ãá pÃároj‚ÇÅ (prim 42 ,Ãá zÃáero)
    ‚ü∂‚ü® Œæ-,Ãá‚ÇÅ (Œ≤-pÃároj‚ÇÇ value-prim value-zÃáero) ‚ü©
        zÃáero ,Ãá pÃároj‚ÇÅ (prim 42 ,Ãá zÃáero)
    ‚ü∂‚ü® Œæ-,Ãá‚ÇÇ value-zÃáero (Œ≤-pÃároj‚ÇÅ value-prim value-zÃáero) ‚ü©
        zÃáero ,Ãá prim 42
    ‚àé

swap√óÃá‚Ä≤ : {A B : Type} ‚Üí [] ‚ä¢ A √óÃá B ‚ÜíÃá B √óÃá A
swap√óÃá‚Ä≤ = ŒªÃá case√óÃá (# 0) (# 0 ,Ãá # 1)

_ : swap√óÃá‚Ä≤ ¬∑ (prim 42 ,Ãá zÃáero) ‚ü∂‚ãÜ (zÃáero ,Ãá prim 42)
_ = begin
        swap√óÃá‚Ä≤ ¬∑ (prim 42 ,Ãá zÃáero)
    ‚ü∂‚ü® Œ≤-ŒªÃá (value-,Ãá value-prim value-zÃáero) ‚ü©
        case√óÃá (prim 42 ,Ãá zÃáero) (# 0 ,Ãá # 1)
    ‚ü∂‚ü® Œ≤-case√óÃá value-prim value-zÃáero ‚ü©
        zÃáero ,Ãá prim 42
    ‚àé

_ : [] ‚Äö ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá ‚Äö ‚ÑïÃá ‚ä¢ ‚ÑïÃá
_ = # 0

_ : [] ‚Äö ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá ‚Äö ‚ÑïÃá ‚ä¢ ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá
_ = # 1

_ : [] ‚Äö ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá ‚Äö ‚ÑïÃá ‚ä¢ ‚ÑïÃá
_ = # 1 ¬∑ # 0

_ : [] ‚Äö ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá ‚Äö ‚ÑïÃá ‚ä¢ ‚ÑïÃá
_ = # 1 ¬∑ (# 1 ¬∑ # 0)

_ : [] ‚Äö ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá ‚ä¢ ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá
_ = ŒªÃá (# 1 ¬∑ (# 1 ¬∑ # 0))

_ : [] ‚ä¢ (‚ÑïÃá ‚ÜíÃá ‚ÑïÃá) ‚ÜíÃá ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá
_ = ŒªÃá ŒªÃá (# 1 ¬∑ (# 1 ¬∑ # 0))

oÃáne : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá
oÃáne = sÃáuc zÃáero

tÃáwo : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá
tÃáwo = sÃáuc oÃáne

tÃáhree : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá
tÃáhree = sÃáuc tÃáwo

aÃádd : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá
aÃádd = ŒºÃá ŒªÃá ŒªÃá case‚ÑïÃá (# 1) (# 0) (sÃáuc (# 3 ¬∑ # 0 ¬∑ # 1))

mÃául : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá
mÃául = ŒºÃá ŒªÃá ŒªÃá case‚ÑïÃá (# 1) zÃáero (aÃádd ¬∑ # 1 ¬∑ (# 3 ¬∑ # 0 ¬∑ # 1))

eÃáxp : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá
eÃáxp = ŒºÃá ŒªÃá ŒªÃá case‚ÑïÃá (# 0) oÃáne (mÃául ¬∑ # 2 ¬∑ (# 3 ¬∑ # 2 ¬∑ # 0))

ŒªÃásÃáuc : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá ‚ÜíÃá ‚ÑïÃá
ŒªÃásÃáuc = ŒªÃá sÃáuc # 0

2+2 : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá
2+2 = aÃádd ¬∑ tÃáwo ¬∑ tÃáwo

2*2 : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá
2*2 = mÃául ¬∑ tÃáwo ¬∑ tÃáwo

Church : Type ‚Üí Type
Church A = (A ‚ÜíÃá A) ‚ÜíÃá (A ‚ÜíÃá A)

zÃáero·∂ú : {Œì : Context} ‚Üí {A : Type}
    ‚Üí Œì ‚ä¢ Church A
zÃáero·∂ú = ŒªÃá ŒªÃá # 0

oÃáne·∂ú : {Œì : Context} ‚Üí {A : Type}
    ‚Üí Œì ‚ä¢ Church A
oÃáne·∂ú = ŒªÃá ŒªÃá # 1 ¬∑ # 0

tÃáwo·∂ú : {Œì : Context} ‚Üí {A : Type}
    ‚Üí Œì ‚ä¢ Church A
tÃáwo·∂ú = ŒªÃá ŒªÃá # 1 ¬∑ (# 1 ¬∑ # 0)

tÃáhree·∂ú : {Œì : Context} ‚Üí {A : Type}
    ‚Üí Œì ‚ä¢ Church A
tÃáhree·∂ú = ŒªÃá ŒªÃá # 1 ¬∑ (# 1 ¬∑ (# 1 ¬∑ # 0))

aÃádd·∂ú : {Œì : Context} ‚Üí {A : Type}
    ‚Üí Œì ‚ä¢ Church A ‚ÜíÃá Church A ‚ÜíÃá Church A
aÃádd·∂ú = ŒªÃá ŒªÃá ŒªÃá ŒªÃá # 3 ¬∑ # 1 ¬∑ (# 2 ¬∑ # 1 ¬∑ # 0)

mÃául·∂ú : {Œì : Context} ‚Üí {A : Type}
    ‚Üí Œì ‚ä¢ Church A ‚ÜíÃá Church A ‚ÜíÃá Church A
mÃául·∂ú = ŒªÃá ŒªÃá ŒªÃá # 2 ¬∑ (# 1 ¬∑ # 0)

eÃáxp·∂ú : {Œì : Context} ‚Üí {A : Type}
    ‚Üí Œì ‚ä¢ Church A ‚ÜíÃá Church (A ‚ÜíÃá A) ‚ÜíÃá Church A
eÃáxp·∂ú = ŒªÃá ŒªÃá # 0 ¬∑ # 1

2+2·∂ú : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá
2+2·∂ú = aÃádd·∂ú ¬∑ tÃáwo·∂ú ¬∑ tÃáwo·∂ú ¬∑ ŒªÃásÃáuc ¬∑ zÃáero

2*2·∂ú : {Œì : Context}
    ‚Üí Œì ‚ä¢ ‚ÑïÃá
2*2·∂ú = mÃául·∂ú ¬∑ tÃáwo·∂ú ¬∑ tÃáwo·∂ú ¬∑ ŒªÃásÃáuc ¬∑ zÃáero

_ : eval (gas 14) (eÃáxp·∂ú ¬∑ tÃáwo·∂ú ¬∑ tÃáwo·∂ú ¬∑ ŒªÃásÃáuc ¬∑ zÃáero) ‚â° steps
    (-- begin
            (ŒªÃá (ŒªÃá ‚ä¢lookup here ¬∑ ‚ä¢lookup (there here))) ¬∑ (ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ (ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ zÃáero
        ‚ü∂‚ü® Œæ-¬∑‚ÇÅ (Œæ-¬∑‚ÇÅ (Œæ-¬∑‚ÇÅ (Œ≤-ŒªÃá value-ŒªÃá))) ‚ü©
            (ŒªÃá ‚ä¢lookup here ¬∑ (ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here)))) ¬∑ (ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ zÃáero
        ‚ü∂‚ü® Œæ-¬∑‚ÇÅ (Œæ-¬∑‚ÇÅ (Œ≤-ŒªÃá value-ŒªÃá)) ‚ü©
            (ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ (ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ zÃáero
        ‚ü∂‚ü® Œæ-¬∑‚ÇÅ (Œæ-¬∑‚ÇÅ (Œ≤-ŒªÃá value-ŒªÃá)) ‚ü©
            (ŒªÃá (ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ ((ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ ‚ä¢lookup here)) ¬∑ (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ zÃáero
        ‚ü∂‚ü® Œæ-¬∑‚ÇÅ (Œ≤-ŒªÃá value-ŒªÃá) ‚ü©
            (ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ ((ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ (ŒªÃá sÃáuc ‚ä¢lookup here)) ¬∑ zÃáero
        ‚ü∂‚ü® Œæ-¬∑‚ÇÅ (Œæ-¬∑‚ÇÇ value-ŒªÃá (Œ≤-ŒªÃá value-ŒªÃá)) ‚ü©
            (ŒªÃá (ŒªÃá ‚ä¢lookup (there here) ¬∑ (‚ä¢lookup (there here) ¬∑ ‚ä¢lookup here))) ¬∑ (ŒªÃá (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ‚ä¢lookup here)) ¬∑ zÃáero
        ‚ü∂‚ü® Œæ-¬∑‚ÇÅ (Œ≤-ŒªÃá value-ŒªÃá) ‚ü©
            (ŒªÃá (ŒªÃá (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ‚ä¢lookup here)) ¬∑ ((ŒªÃá (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ‚ä¢lookup here)) ¬∑ ‚ä¢lookup here)) ¬∑ zÃáero
        ‚ü∂‚ü® Œ≤-ŒªÃá value-zÃáero ‚ü©
            (ŒªÃá (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ‚ä¢lookup here)) ¬∑ ((ŒªÃá (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ‚ä¢lookup here)) ¬∑ zÃáero)
        ‚ü∂‚ü® Œæ-¬∑‚ÇÇ value-ŒªÃá (Œ≤-ŒªÃá value-zÃáero) ‚ü©
            (ŒªÃá (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ‚ä¢lookup here)) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ zÃáero))
        ‚ü∂‚ü® Œæ-¬∑‚ÇÇ value-ŒªÃá (Œæ-¬∑‚ÇÇ value-ŒªÃá (Œ≤-ŒªÃá value-zÃáero)) ‚ü©
            (ŒªÃá (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ‚ä¢lookup here)) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ sÃáuc zÃáero)
        ‚ü∂‚ü® Œæ-¬∑‚ÇÇ value-ŒªÃá (Œ≤-ŒªÃá (value-sÃáuc value-zÃáero)) ‚ü©
            (ŒªÃá (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ‚ä¢lookup here)) ¬∑ sÃáuc (sÃáuc zÃáero)
        ‚ü∂‚ü® Œ≤-ŒªÃá (value-sÃáuc (value-sÃáuc value-zÃáero)) ‚ü©
            (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ ((ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ sÃáuc (sÃáuc zÃáero))
        ‚ü∂‚ü® Œæ-¬∑‚ÇÇ value-ŒªÃá (Œ≤-ŒªÃá (value-sÃáuc (value-sÃáuc value-zÃáero))) ‚ü©
            (ŒªÃá sÃáuc ‚ä¢lookup here) ¬∑ sÃáuc (sÃáuc (sÃáuc zÃáero))
        ‚ü∂‚ü® Œ≤-ŒªÃá (value-sÃáuc (value-sÃáuc (value-sÃáuc value-zÃáero))) ‚ü©
            sÃáuc (sÃáuc (sÃáuc (sÃáuc zÃáero)))
        ‚àé)
    (done (value-sÃáuc (value-sÃáuc (value-sÃáuc (value-sÃáuc value-zÃáero)))))
_ = refl

determinism : {Œì : Context} ‚Üí {A : Type} ‚Üí {term‚ÇÅ term‚ÇÇ term‚ÇÉ : Œì ‚ä¢ A}
    ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÇ ‚Üí term‚ÇÅ ‚ü∂ term‚ÇÉ
    ‚Üí term‚ÇÇ ‚â° term‚ÇÉ
determinism (Œ≤-ŒªÃá value‚ÇÅ) (Œ≤-ŒªÃá value‚ÇÇ) = refl
determinism (Œ≤-ŒªÃá value‚ÇÅ) (Œæ-¬∑‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÅ reduction‚ÇÇ)
determinism Œ≤-zÃáero Œ≤-zÃáero = refl
determinism (Œ≤-sÃáuc value‚ÇÅ) (Œ≤-sÃáuc value‚ÇÇ) = refl
determinism (Œ≤-sÃáuc value‚ÇÅ) (Œæ-case‚ÑïÃá reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-sÃáuc value‚ÇÅ) reduction‚ÇÇ)
determinism Œ≤-ŒºÃá Œ≤-ŒºÃá = refl
determinism (Œ≤-lÃáet value‚ÇÅ) (Œ≤-lÃáet value‚ÇÇ) = refl
determinism (Œ≤-lÃáet value‚ÇÅ) (Œæ-lÃáet reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÅ reduction‚ÇÇ)
determinism Œ≤-caseùüôÃá Œ≤-caseùüôÃá = refl
determinism (Œ≤-iÃánj‚ÇÅ value‚ÇÅ) (Œ≤-iÃánj‚ÇÅ value‚ÇÇ) = refl
determinism (Œ≤-iÃánj‚ÇÅ value‚ÇÅ) (Œæ-case+Ãá reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-iÃánj‚ÇÅ value‚ÇÅ) reduction‚ÇÇ)
determinism (Œ≤-iÃánj‚ÇÇ value‚ÇÅ) (Œ≤-iÃánj‚ÇÇ value‚ÇÇ) = refl
determinism (Œ≤-iÃánj‚ÇÇ value‚ÇÅ) (Œæ-case+Ãá reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-iÃánj‚ÇÇ value‚ÇÅ) reduction‚ÇÇ)
determinism (Œ≤-pÃároj‚ÇÅ value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) (Œ≤-pÃároj‚ÇÅ value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) = refl
determinism (Œ≤-pÃároj‚ÇÅ value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) (Œæ-pÃároj‚ÇÅ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-,Ãá value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) reduction‚ÇÇ)
determinism (Œ≤-pÃároj‚ÇÇ value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) (Œ≤-pÃároj‚ÇÇ value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) = refl
determinism (Œ≤-pÃároj‚ÇÇ value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) (Œæ-pÃároj‚ÇÇ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-,Ãá value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) reduction‚ÇÇ)
determinism (Œ≤-case√óÃá value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) (Œ≤-case√óÃá value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) = refl
determinism (Œ≤-case√óÃá value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) (Œæ-case√óÃá reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-,Ãá value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) reduction‚ÇÇ)
determinism Œ≤-[Ãá] Œ≤-[Ãá] = refl
determinism (Œ≤-‚à∑Ãá value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) (Œ≤-‚à∑Ãá value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) = refl
determinism (Œ≤-‚à∑Ãá value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) (Œæ-caseLÃáist reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-‚à∑Ãá value‚ÇÅ‚ÇÅ value‚ÇÅ‚ÇÇ) reduction‚ÇÇ)
determinism Œ¥-sÃÇuc Œ¥-sÃÇuc = refl
determinism Œ¥-+ÃÇ Œ¥-+ÃÇ = refl
determinism Œ¥-*ÃÇ Œ¥-*ÃÇ = refl
determinism (Œæ-¬∑‚ÇÅ {term‚ÇÇ = term‚ÇÇ} reduction‚ÇÅ) (Œæ-¬∑‚ÇÅ reduction‚ÇÇ) = cong (_¬∑ term‚ÇÇ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-¬∑‚ÇÅ reduction‚ÇÅ) (Œæ-¬∑‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÇ reduction‚ÇÅ)
determinism (Œæ-¬∑‚ÇÇ value‚ÇÅ reduction‚ÇÅ) (Œ≤-ŒªÃá value‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÇ reduction‚ÇÅ)
determinism (Œæ-¬∑‚ÇÇ value‚ÇÅ reduction‚ÇÅ) (Œæ-¬∑‚ÇÅ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-¬∑‚ÇÇ {term‚ÇÅ = term‚ÇÅ} value‚ÇÅ reduction‚ÇÅ) (Œæ-¬∑‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = cong (term‚ÇÅ ¬∑_) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-sÃáuc reduction‚ÇÅ) (Œæ-sÃáuc reduction‚ÇÇ) = cong sÃáuc_ (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-case‚ÑïÃá reduction‚ÇÅ) (Œ≤-sÃáuc value‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-sÃáuc value‚ÇÇ) reduction‚ÇÅ)
determinism (Œæ-case‚ÑïÃá {term‚ÇÇ = term‚ÇÇ} {term‚ÇÉ = term‚ÇÉ} reduction‚ÇÅ) (Œæ-case‚ÑïÃá reduction‚ÇÇ) = cong (Œª term‚ÇÅ ‚Üí case‚ÑïÃá term‚ÇÅ term‚ÇÇ term‚ÇÉ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-lÃáet reduction‚ÇÅ) (Œ≤-lÃáet value‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÇ reduction‚ÇÅ)
determinism (Œæ-lÃáet {term‚ÇÇ = term‚ÇÇ} reduction‚ÇÅ) (Œæ-lÃáet reduction‚ÇÇ) = cong (Œª term‚ÇÅ ‚Üí lÃáet term‚ÇÅ term‚ÇÇ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-sÃÇuc reduction‚ÇÅ) (Œæ-sÃÇuc reduction‚ÇÇ) = cong sÃÇuc_ (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-+ÃÇ‚ÇÅ {term‚ÇÇ = term‚ÇÇ} reduction‚ÇÅ) (Œæ-+ÃÇ‚ÇÅ reduction‚ÇÇ) = cong (_+ÃÇ term‚ÇÇ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-+ÃÇ‚ÇÅ reduction‚ÇÅ) (Œæ-+ÃÇ‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÇ reduction‚ÇÅ)
determinism (Œæ-+ÃÇ‚ÇÇ value‚ÇÅ reduction‚ÇÅ) (Œæ-+ÃÇ‚ÇÅ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-+ÃÇ‚ÇÇ {term‚ÇÅ = term‚ÇÅ} value‚ÇÅ reduction‚ÇÅ) (Œæ-+ÃÇ‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = cong (term‚ÇÅ +ÃÇ_) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-*ÃÇ‚ÇÅ {term‚ÇÇ = term‚ÇÇ} reduction‚ÇÅ) (Œæ-*ÃÇ‚ÇÅ reduction‚ÇÇ) = cong (_*ÃÇ term‚ÇÇ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-*ÃÇ‚ÇÅ reduction‚ÇÅ) (Œæ-*ÃÇ‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÇ reduction‚ÇÅ)
determinism (Œæ-*ÃÇ‚ÇÇ value‚ÇÅ reduction‚ÇÅ) (Œæ-*ÃÇ‚ÇÅ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-*ÃÇ‚ÇÇ {term‚ÇÅ = term‚ÇÅ} value‚ÇÅ reduction‚ÇÅ) (Œæ-*ÃÇ‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = cong (term‚ÇÅ *ÃÇ_) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-caseùüòÃá reduction‚ÇÅ) (Œæ-caseùüòÃá reduction‚ÇÇ) = cong caseùüòÃá (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-caseùüôÃá {term‚ÇÇ = term‚ÇÇ} reduction‚ÇÅ) (Œæ-caseùüôÃá reduction‚ÇÇ) = cong (Œª term‚ÇÅ ‚Üí caseùüôÃá term‚ÇÅ term‚ÇÇ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-iÃánj‚ÇÅ reduction‚ÇÅ) (Œæ-iÃánj‚ÇÅ reduction‚ÇÇ) = cong iÃánj‚ÇÅ (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-iÃánj‚ÇÇ reduction‚ÇÅ) (Œæ-iÃánj‚ÇÇ reduction‚ÇÇ) = cong iÃánj‚ÇÇ (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-case+Ãá reduction‚ÇÅ) (Œ≤-iÃánj‚ÇÅ value‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-iÃánj‚ÇÅ value‚ÇÇ) reduction‚ÇÅ)
determinism (Œæ-case+Ãá reduction‚ÇÅ) (Œ≤-iÃánj‚ÇÇ value‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-iÃánj‚ÇÇ value‚ÇÇ) reduction‚ÇÅ)
determinism (Œæ-case+Ãá {term‚ÇÇ = term‚ÇÇ} {term‚ÇÉ = term‚ÇÉ} reduction‚ÇÅ) (Œæ-case+Ãá reduction‚ÇÇ) = cong (Œª term‚ÇÅ ‚Üí case+Ãá term‚ÇÅ term‚ÇÇ term‚ÇÉ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-,Ãá‚ÇÅ {term‚ÇÇ = term‚ÇÇ} reduction‚ÇÅ) (Œæ-,Ãá‚ÇÅ reduction‚ÇÇ) = cong (_,Ãá term‚ÇÇ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-,Ãá‚ÇÅ reduction‚ÇÅ) (Œæ-,Ãá‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÇ reduction‚ÇÅ)
determinism (Œæ-,Ãá‚ÇÇ value‚ÇÅ reduction‚ÇÅ) (Œæ-,Ãá‚ÇÅ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-,Ãá‚ÇÇ {term‚ÇÅ = term‚ÇÅ} value‚ÇÅ reduction‚ÇÅ) (Œæ-,Ãá‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = cong (term‚ÇÅ ,Ãá_) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-pÃároj‚ÇÅ reduction‚ÇÅ) (Œ≤-pÃároj‚ÇÅ value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-,Ãá value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) reduction‚ÇÅ)
determinism (Œæ-pÃároj‚ÇÅ reduction‚ÇÅ) (Œæ-pÃároj‚ÇÅ reduction‚ÇÇ) = cong pÃároj‚ÇÅ (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-pÃároj‚ÇÇ reduction‚ÇÅ) (Œ≤-pÃároj‚ÇÇ value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-,Ãá value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) reduction‚ÇÅ)
determinism (Œæ-pÃároj‚ÇÇ reduction‚ÇÅ) (Œæ-pÃároj‚ÇÇ reduction‚ÇÇ) = cong pÃároj‚ÇÇ (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-case√óÃá reduction‚ÇÅ) (Œ≤-case√óÃá value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-,Ãá value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) reduction‚ÇÅ)
determinism (Œæ-case√óÃá {term‚ÇÇ = term‚ÇÇ} reduction‚ÇÅ) (Œæ-case√óÃá reduction‚ÇÇ) = cong (Œª term‚ÇÅ ‚Üí case√óÃá term‚ÇÅ term‚ÇÇ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-‚à∑Ãá‚ÇÅ {term‚ÇÇ = term‚ÇÇ} reduction‚ÇÅ) (Œæ-‚à∑Ãá‚ÇÅ reduction‚ÇÇ) = cong (_‚à∑Ãá term‚ÇÇ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-‚à∑Ãá‚ÇÅ reduction‚ÇÅ) (Œæ-‚à∑Ãá‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÇ reduction‚ÇÅ)
determinism (Œæ-‚à∑Ãá‚ÇÇ value‚ÇÅ reduction‚ÇÅ) (Œæ-‚à∑Ãá‚ÇÅ reduction‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] value‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-‚à∑Ãá‚ÇÇ {term‚ÇÅ = term‚ÇÅ} value‚ÇÅ reduction‚ÇÅ) (Œæ-‚à∑Ãá‚ÇÇ value‚ÇÇ reduction‚ÇÇ) = cong (term‚ÇÅ ‚à∑Ãá_) (determinism reduction‚ÇÅ reduction‚ÇÇ)
determinism (Œæ-caseLÃáist reduction‚ÇÅ) (Œ≤-‚à∑Ãá value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) = ‚ä•-elim (¬¨[value√óreducible] (value-‚à∑Ãá value‚ÇÇ‚ÇÅ value‚ÇÇ‚ÇÇ) reduction‚ÇÅ)
determinism (Œæ-caseLÃáist {term‚ÇÇ = term‚ÇÇ} {term‚ÇÉ = term‚ÇÉ} reduction‚ÇÅ) (Œæ-caseLÃáist reduction‚ÇÇ) = cong (Œª term‚ÇÅ ‚Üí caseLÃáist term‚ÇÅ term‚ÇÇ term‚ÇÉ) (determinism reduction‚ÇÅ reduction‚ÇÇ)
